[{"/home/estudiantes/julian.castanoj/PI2/src/index.js":"1","/home/estudiantes/julian.castanoj/PI2/src/App.js":"2","/home/estudiantes/julian.castanoj/PI2/src/reportWebVitals.js":"3","/home/estudiantes/julian.castanoj/PI2/src/pages/Logout.jsx":"4","/home/estudiantes/julian.castanoj/PI2/src/pages/Estadisticas.jsx":"5","/home/estudiantes/julian.castanoj/PI2/src/pages/Transformadores.jsx":"6","/home/estudiantes/julian.castanoj/PI2/src/pages/Inicio.jsx":"7","/home/estudiantes/julian.castanoj/PI2/src/pages/RegistrarTransformadores.jsx":"8","/home/estudiantes/julian.castanoj/PI2/src/pages/Productores/Productores.jsx":"9","/home/estudiantes/julian.castanoj/PI2/src/pages/Gestores/Gestores.jsx":"10","/home/estudiantes/julian.castanoj/PI2/src/pages/TransGestorProductor/Transacciones.jsx":"11","/home/estudiantes/julian.castanoj/PI2/src/pages/Gestores/RegistrarGestores.jsx":"12","/home/estudiantes/julian.castanoj/PI2/src/pages/Productores/RegistrarProductores.jsx":"13","/home/estudiantes/julian.castanoj/PI2/src/pages/TransGestorProductor/RegistrarTransacciones.jsx":"14","/home/estudiantes/julian.castanoj/PI2/src/pages/EditarTransformador.jsx":"15","/home/estudiantes/julian.castanoj/PI2/src/pages/ProductorGestor.jsx":"16","/home/estudiantes/julian.castanoj/PI2/src/pages/EditarProductorGestor.jsx":"17","/home/estudiantes/julian.castanoj/PI2/src/pages/RegistrarProductorGestor.jsx":"18","/home/estudiantes/julian.castanoj/PI2/src/pages/TransGestorProductor/EditarTransaccion.jsx":"19","/home/estudiantes/julian.castanoj/PI2/src/pages/Gestores/EditarGestor.jsx":"20","/home/estudiantes/julian.castanoj/PI2/src/components/Sidebar.jsx":"21","/home/estudiantes/julian.castanoj/PI2/src/pages/Productores/EditarProductores.jsx":"22","/home/estudiantes/julian.castanoj/PI2/src/components/Navbar.jsx":"23","/home/estudiantes/julian.castanoj/PI2/src/pages/TransGestorGestor/GestorGestor.jsx":"24","/home/estudiantes/julian.castanoj/PI2/src/pages/TransGestorGestor/EditarGestorGestor.jsx":"25","/home/estudiantes/julian.castanoj/PI2/src/pages/TransGestorGestor/RegistrarGestorGestor.jsx":"26","/home/estudiantes/julian.castanoj/PI2/src/pages/TransGestorExterno/EditarGestorEntidadExterna.jsx":"27","/home/estudiantes/julian.castanoj/PI2/src/pages/TransGestorExterno/GestorEntidadExterna.jsx":"28","/home/estudiantes/julian.castanoj/PI2/src/pages/TransGestorExterno/RegistrarGestorEntidadExterna.jsx":"29","/home/estudiantes/julian.castanoj/PI2/src/components/StatsLayout.jsx":"30","/home/estudiantes/julian.castanoj/PI2/src/pages/Graficas/DoughnutChart.jsx":"31","/home/estudiantes/julian.castanoj/PI2/src/pages/Graficas/LineChartG.jsx":"32","/home/estudiantes/julian.castanoj/PI2/src/pages/Graficas/BarChart.jsx":"33","/home/estudiantes/julian.castanoj/PI2/src/pages/Graficas/LineChartT.jsx":"34"},{"size":268,"mtime":1700587871948,"results":"35","hashOfConfig":"36"},{"size":6597,"mtime":1700587871948,"results":"37","hashOfConfig":"36"},{"size":362,"mtime":1700587871952,"results":"38","hashOfConfig":"36"},{"size":737,"mtime":1700587871948,"results":"39","hashOfConfig":"36"},{"size":686,"mtime":1700589078760,"results":"40","hashOfConfig":"36"},{"size":3799,"mtime":1700587871952,"results":"41","hashOfConfig":"36"},{"size":6766,"mtime":1700587871948,"results":"42","hashOfConfig":"36"},{"size":13755,"mtime":1700587871948,"results":"43","hashOfConfig":"36"},{"size":3793,"mtime":1700587871948,"results":"44","hashOfConfig":"36"},{"size":3838,"mtime":1700587871948,"results":"45","hashOfConfig":"36"},{"size":5488,"mtime":1700587871952,"results":"46","hashOfConfig":"36"},{"size":16383,"mtime":1700587871948,"results":"47","hashOfConfig":"36"},{"size":13740,"mtime":1700587871948,"results":"48","hashOfConfig":"36"},{"size":12629,"mtime":1700587871952,"results":"49","hashOfConfig":"36"},{"size":10184,"mtime":1700587871948,"results":"50","hashOfConfig":"36"},{"size":3661,"mtime":1700587871948,"results":"51","hashOfConfig":"36"},{"size":0,"mtime":1700587871948,"results":"52","hashOfConfig":"36"},{"size":7778,"mtime":1700587871948,"results":"53","hashOfConfig":"36"},{"size":0,"mtime":1700587871952,"results":"54","hashOfConfig":"36"},{"size":10021,"mtime":1700587871948,"results":"55","hashOfConfig":"36"},{"size":6559,"mtime":1700587871948,"results":"56","hashOfConfig":"36"},{"size":7301,"mtime":1700587871948,"results":"57","hashOfConfig":"36"},{"size":225,"mtime":1700587871948,"results":"58","hashOfConfig":"36"},{"size":4855,"mtime":1700587871948,"results":"59","hashOfConfig":"36"},{"size":0,"mtime":1700587871948,"results":"60","hashOfConfig":"36"},{"size":14876,"mtime":1700587871948,"results":"61","hashOfConfig":"36"},{"size":5920,"mtime":1700587871948,"results":"62","hashOfConfig":"36"},{"size":4284,"mtime":1700587871948,"results":"63","hashOfConfig":"36"},{"size":14284,"mtime":1700587871948,"results":"64","hashOfConfig":"36"},{"size":436,"mtime":1700587871948,"results":"65","hashOfConfig":"36"},{"size":2569,"mtime":1700589033080,"results":"66","hashOfConfig":"36"},{"size":4720,"mtime":1700589036488,"results":"67","hashOfConfig":"36"},{"size":1415,"mtime":1700589027120,"results":"68","hashOfConfig":"36"},{"size":4652,"mtime":1700589042280,"results":"69","hashOfConfig":"36"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},"c6qvrr",{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"73"},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"73"},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"127","messages":"128","suppressedMessages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"130","messages":"131","suppressedMessages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"73"},{"filePath":"134","messages":"135","suppressedMessages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"137","messages":"138","suppressedMessages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"140","messages":"141","suppressedMessages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"143","messages":"144","suppressedMessages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"73"},{"filePath":"147","messages":"148","suppressedMessages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"150","messages":"151","suppressedMessages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"73"},{"filePath":"154","messages":"155","suppressedMessages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"73"},{"filePath":"158","messages":"159","suppressedMessages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"73"},{"filePath":"162","messages":"163","suppressedMessages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"73"},{"filePath":"166","messages":"167","suppressedMessages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"169","messages":"170","suppressedMessages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"172","messages":"173","suppressedMessages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"175","messages":"176","suppressedMessages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"178","messages":"179","suppressedMessages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/estudiantes/julian.castanoj/PI2/src/index.js",[],[],["181","182"],"/home/estudiantes/julian.castanoj/PI2/src/App.js",[],[],"/home/estudiantes/julian.castanoj/PI2/src/reportWebVitals.js",[],[],"/home/estudiantes/julian.castanoj/PI2/src/pages/Logout.jsx",[],[],"/home/estudiantes/julian.castanoj/PI2/src/pages/Estadisticas.jsx",[],[],"/home/estudiantes/julian.castanoj/PI2/src/pages/Transformadores.jsx",[],[],"/home/estudiantes/julian.castanoj/PI2/src/pages/Inicio.jsx",[],[],"/home/estudiantes/julian.castanoj/PI2/src/pages/RegistrarTransformadores.jsx",[],[],"/home/estudiantes/julian.castanoj/PI2/src/pages/Productores/Productores.jsx",[],[],"/home/estudiantes/julian.castanoj/PI2/src/pages/Gestores/Gestores.jsx",[],[],"/home/estudiantes/julian.castanoj/PI2/src/pages/TransGestorProductor/Transacciones.jsx",["183"],[],"import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport '../../styles/custom-table.css';\n\nconst Transactions = () => {\n  const [data, setData] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [searchNit, setSearchNit] = useState('');\n  const itemsPerPage = 10;\n  const totalPages = Math.ceil(data.length / itemsPerPage);\n  const [filteredData, setFilteredData] = useState([]);\n  const [error, setError] = useState(null);\n  const [gestoresData, setGestoresData] = useState([]);\n\n  const [transformadoresData, setTransformadoresData] = useState([]); // Nueva variable de estado\n\n  useEffect(() => {\n    const fetchDataAndGestores = async () => {\n      try {\n        const [transaccionesResponse, gestoresResponse, transformadoresResponse] = await Promise.all([\n          fetch('http://localhost:3000/transacciongt'),\n          fetch('http://localhost:3000/gestor'),\n          fetch('http://localhost:3000/transformador')\n        ]);\n\n        if (transaccionesResponse.ok && gestoresResponse.ok && transformadoresResponse.ok) {\n          const transaccionesResult = await transaccionesResponse.json();\n          const gestoresResult = await gestoresResponse.json();\n          const transformadoresResult = await transformadoresResponse.json();\n\n          console.log('Transacciones Data:', transaccionesResult);\n          console.log('Gestores Data:', gestoresResult);\n          console.log('Transformadores Data:', transformadoresResult);\n\n          setData(transaccionesResult);\n          setFilteredData(transaccionesResult);\n          setGestoresData(gestoresResult);\n          setTransformadoresData(transformadoresResult); \n        } else {\n          console.error('Error al cargar datos de la API');\n          setError('Error al cargar datos de la API');\n        }\n      } catch (error) {\n        console.error('Error al realizar la solicitud:', error);\n        setError('Error al realizar la solicitud');\n      }\n    };\n\n    fetchDataAndGestores();\n  }, []);\n\n  const handleSearchChange = (e) => {\n    const searchTerm = e.target.value;\n    setSearchNit(searchTerm);\n\n    const filtered = data.filter((item) =>\n      item.nit.includes(searchTerm)\n    );\n\n    setFilteredData(filtered);\n  };\n\n  const handlePageChange = (newPage) => {\n    setCurrentPage(newPage);\n  };\n\n  const paginatedData = filteredData.slice(\n    (currentPage - 1) * itemsPerPage,\n    currentPage * itemsPerPage\n  );\n\n  const getTransformadorNameById = (transformadorId) => {\n    const transformador = transformadoresData.find((t) => t.id === transformadorId);\n    return transformador ? transformador.razon_social : 'Nombre no encontrado';\n  };\n\n  const deleteTransaction = async (id) => {\n    try {\n      const response = await fetch(`http://localhost:3000/transacciongt/${id}`, {\n        method: 'DELETE',\n      });\n      if (response.ok) {\n        // Remove the deleted item from the data array\n        const updatedData = data.filter((item) => item.id !== id);\n        setData(updatedData);\n        setFilteredData(updatedData);\n      } else {\n        console.error('Error al eliminar la transacción');\n        setError('Error al eliminar la transacción');\n      }\n    } catch (error) {\n      console.error('Error al realizar la solicitud:', error);\n      setError('Error al realizar la solicitud');\n    }\n  };\n\n  \n\n\n  return (\n    <div className=\"about-page\">\n      <h1 className=\"page-title\">Gestor Transformador</h1>\n\n      {error && (\n        <div className=\"error-message\">\n          Error: {error}\n        </div>\n      )}\n\n      <div className=\"search-bar\">\n        <input\n          type=\"text\"\n          placeholder=\"Buscar por ID\"\n          value={searchNit}\n          onChange={handleSearchChange}\n          className=\"search-input\"\n        />\n      </div>\n\n      <table className=\"custom-table\">\n        <thead>\n          <tr>\n            <th>Gestor</th>\n            <th>Transformador</th>\n            <th>Material</th>\n            <th>Fecha</th>\n            <th>Descripción</th>\n            <th>Acciones</th>\n          </tr>\n        </thead>\n        <tbody>\n          {paginatedData.map((item) => (\n            <tr key={item.id}>\n              <td>{item.gestor ? item.gestor.nombre : 'Nombre no encontrado'}</td>\n              <td>{item.transformador ? getTransformadorNameById(item.transformador.id) : 'Nombre no encontrado'}</td>\n\n\n\n              <td>{item.material}</td>\n              <td>{item.fecha}</td>\n              <td>{item.descripcion}</td>\n              <td>\n                <button onClick={() => deleteTransaction(item.id)}>Eliminar</button>\n                <Link to={`/editarTransaccion/${item.id}`}>\n                  <button>Editar</button>\n                </Link>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n\n      <div className=\"pagination\">\n        <button\n          onClick={() => handlePageChange(currentPage - 1)}\n          disabled={currentPage === 1}\n        >\n          Anterior\n        </button>\n        <span>Página {currentPage} de {totalPages}</span>\n        <button\n          onClick={() => handlePageChange(currentPage + 1)}\n          disabled={currentPage === totalPages}\n        >\n          Siguiente\n        </button>\n      </div>\n\n      <div className=\"action-buttons\">\n        <Link to=\"/registrarTransacciones\" className=\"register-button\">\n          Registrar\n        </Link>\n      </div>\n    </div>\n  );\n};\n\nexport default Transactions;\n\n\n\n\n","/home/estudiantes/julian.castanoj/PI2/src/pages/Gestores/RegistrarGestores.jsx",[],[],"/home/estudiantes/julian.castanoj/PI2/src/pages/Productores/RegistrarProductores.jsx",[],[],"/home/estudiantes/julian.castanoj/PI2/src/pages/TransGestorProductor/RegistrarTransacciones.jsx",["184","185","186","187","188","189","190","191","192","193"],[],"import React, { useState, useEffect, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nconst RegistrarTransacciones = () => {\n  const navigate = useNavigate();\n\n  const [formData, setFormData] = useState({\n    gestor_realiza: '',\n    transformador: '',\n    material: '',\n    cantidad: '',\n    fecha: '',\n    archivoImagen: null,\n    descripcion: '',\n    ubicacion: '',\n  });\n\n  const [registros, setRegistros] = useState([]);\n  const [trasformadores, setTrasformadores] = useState([]);\n  const [gestores, setGestores] = useState([]);\n  const [message, setMessage] = useState(null);\n  const [materialesString, setMaterialesString] = useState([]);\n  const [materiales, setMateriales] = useState([]);\n\n  const [puntosRecoleccion, setPuntosRecoleccion] = useState([]);\n  const [cantidades, setCantidades] = useState(Array.from({ length: materiales.length }, () => ''));\n\n  const fetchData = useCallback(async () => {\n    try {\n      const response = await fetch('http://localhost:3000/transacciones');\n      if (response.ok) {\n        const result = await response.json();\n        setRegistros(result);\n      } else {\n        console.error('Error al cargar datos de la API');\n      }\n    } catch (error) {\n      console.error('Error al realizar la solicitud:', error);\n    }\n  }, []);\n\n  useEffect(() => {\n    fetchData();\n    fetch('http://localhost:3000/gestor')\n      .then((response) => response.json())\n      .then((data) => setGestores(data))\n      .catch((error) => console.error('Error al obtener la lista de gestores:', error));\n  }, []);\n\n  useEffect(() => {\n    fetchData();\n    fetch('http://localhost:3000/transformador')\n      .then((response) => response.json())\n      .then((data) => setTrasformadores(data)) // Cambiado de setGestores a setTrasformadores\n      .catch((error) => console.error('Error al obtener la lista de transformadores:', error));\n  }, []);\n\n  useEffect(() => {\n    if (formData.gestor_id && formData.transformador_id) {\n      const commonMaterials = gestores\n        .find((gestor) => gestor.id === formData.gestor_id)?.materiales_recolectados\n        .split(',')\n        .map((material) => material.trim())\n        .filter((material) =>\n          gestores.find((gestor) => gestor.id === formData.transformador_id)?.materiales_recolectados\n            .split(',')\n            .map((m) => m.trim())\n            .includes(material)\n        );\n\n      setMateriales(commonMaterials);\n      setCantidades(Array.from({ length: commonMaterials.length }, () => ''));\n    }\n  }, [formData.gestor_id, formData.transformador_id, gestores]);\n\n  const handleMaterialChange = (e) => {\n    const selectedMaterial = e.target.value;\n    setFormData((prevFormData) => ({\n      ...prevFormData,\n      materialId: selectedMaterial,\n    }));\n\n    setMateriales((prevMateriales) => [...prevMateriales, selectedMaterial]);\n  };\n\n  const fetchMaterials = (gestorId) => {\n    const parsedId = parseInt(gestorId);\n    if (!isNaN(parsedId)) {\n      fetch(`http://localhost:3000/gestor/${parsedId}`)\n        .then((response) => response.json())\n        .then((data) => {\n          if (data && data.materiales_recolectados) {\n            const materialList = data.materiales_recolectados.split(',').map((materialId) => materialId.trim());\n            setMateriales(materialList);\n          }\n        })\n        .catch((error) => console.error('Error al obtener la lista de materiales:', error));\n    } else {\n      console.error('El ID seleccionado no es válido:', gestorId);\n    }\n  };\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n\n    setFormData((prevFormData) => ({\n      ...prevFormData,\n      [name]: value,\n    }));\n  };\n\n  const handleCantidadChange = (index, event) => {\n    const newValue = event.target.value;\n\n    setCantidades((prevCantidades) => {\n      const updatedCantidades = [...prevCantidades];\n      updatedCantidades[index] = newValue;\n\n      const cantidadesString = updatedCantidades.join(', ');\n      setFormData((prevFormData) => ({\n        ...prevFormData,\n        cantidad: cantidadesString,\n      }));\n\n      return updatedCantidades;\n    });\n  };\n\n  const handleGestorRealizaIdChange = async (e) => {\n    const selectedId = e.target.value;\n    if (selectedId !== '0') {\n      const parsedId = parseInt(selectedId);\n      if (!isNaN(parsedId)) {\n        try {\n          const response = await fetch(`http://localhost:3000/gestor/${parsedId}`);\n          if (response.ok) {\n            const data = await response.json();\n            setFormData({\n              ...formData,\n              gestor_id: data.id,\n            });\n            fetchMaterials(parsedId);\n          } else {\n            console.error('Error al obtener los detalles del gestor realiza:', response.status);\n          }\n        } catch (error) {\n          console.error('Error al obtener los detalles del gestor realiza:', error);\n        }\n      } else {\n        console.error('El ID seleccionado no es válido:', selectedId);\n      }\n    }\n  };\n\n  const handleTransformadorRecibeIdChange = async (e) => {\n    const selectedId = e.target.value;\n    if (selectedId !== '0') {\n      const parsedId = parseInt(selectedId);\n      if (!isNaN(parsedId)) {\n        try {\n          const response = await fetch(`http://localhost:3000/transformador/${parsedId}`);\n          if (response.ok) {\n            const data = await response.json();\n            setFormData({\n              ...formData,\n              transformador_id: data.id,\n            });\n            fetchDireccionPrincipal(parsedId);\n          } else {\n            console.error('Error al obtener los detalles del transformador recibe:', response.status);\n          }\n        } catch (error) {\n          console.error('Error al obtener los detalles del transformador recibe:', error);\n        }\n      } else {\n        console.error('El ID seleccionado no es válido:', selectedId);\n      }\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    console.log(formData);\n  \n    // Eliminamos la confirmación\n    // if (window.confirm('¿Estás seguro de que deseas enviar el formulario?')) {\n  \n    const numericGestorRecibe = isNaN(formData.gestor_recibe)\n      ? formData.gestor_recibe\n      : parseFloat(formData.gestor_recibe);\n  \n    // Eliminamos la condición userConfirmed y el bloque if (userConfirmed)\n    try {\n      const requestBody = {\n        gestor_realiza: formData.gestor_id,\n        transformador: formData.transformador_id,\n        material: formData.material,\n        cantidad: formData.cantidad,\n        fecha: formData.fecha,\n        archivoImagen: formData.archivoImagen,\n        descripcion: formData.descripcion,\n        ubicacion: formData.ubicacion,\n      };\n  \n      const requestOptions = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(requestBody),\n      };\n  \n      const response = await fetch('http://localhost:3000/transacciones', requestOptions);\n  \n      if (response.ok) {\n        console.log('Registro exitoso');\n        setMessage('Registro exitoso');\n        fetchData();\n  \n        setFormData({\n          gestor_realiza: '',\n          gestor_recibe: '',\n          material: '',\n          cantidad: '',\n          fecha: '',\n          archivoImagen: null,\n          descripcion: '',\n          ubicacion: '',\n        });\n      } else {\n        if (response.status === 400) {\n          const errorData = await response.json();\n          setMessage(`Error al registrar: ${errorData.message}`);\n        } else {\n          setMessage('Error al registrar. Por favor, intenta de nuevo.');\n        }\n      }\n    } catch (error) {\n      console.error('Error al realizar la solicitud:', error);\n      setMessage('Error de red. Por favor, verifica tu conexión.');\n    }\n    \n  };\n\n\n  const handleCancelar = () => {\n    navigate('/gestorGestor');\n  };\n\n  const fetchDireccionPrincipal = (transformadorId) => {\n    fetch(`http://localhost:3000/transformador/${transformadorId}`)\n      .then((response) => response.json())\n      .then((data) => {\n        if (data && data.direccion_principal) {\n          const direccionPrincipal = data.direccion_principal;\n\n          console.log('Direccion Principal:', direccionPrincipal);\n        } else {\n          console.log('No se encontró la dirección principal en la respuesta:', data);\n        }\n      })\n      .catch((error) => console.error('Error al obtener la dirección principal:', error));\n  };\n\n  return (\n    <div className=\"registrar-miembros-page\">\n      <h2>Formulario de Registro de Gestor - Transformador</h2>\n      <form onSubmit={handleSubmit}>\n        <div className=\"form-group\">\n          <label>Gestor Realiza</label>\n          <select\n            name=\"gestorRealizaId\"\n            value={formData.gestorRealizaId}\n            onChange={handleGestorRealizaIdChange}\n          >\n            <option value=\"\">Selecciona un gestor realiza</option>\n            {gestores.map((gestor) => (\n              <option key={gestor.id} value={gestor.id}>\n                {`${gestor.id} - ${gestor.nombre}`}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        <div className=\"form-group\">\n          <label>Transformador Recibe</label>\n          <select\n            name=\"trasformadorRecibeId\"\n            value={formData.trasformadorRecibeId}\n            onChange={handleTransformadorRecibeIdChange}\n          >\n            <option value=\"\">Selecciona un transformador recibe</option>\n            {trasformadores.map((transformador) => (\n              <option key={transformador.id} value={transformador.id}>\n                {`${transformador.id} - ${transformador.representante_legal}`}\n              </option>\n            ))}\n          </select>\n        </div>\n\n\n        <div className=\"\">\n          <div className=\"\">\n            <label>Materiales Asociados</label>\n            <table>\n              <thead>\n                <tr>\n                  <th>Material</th>\n                </tr>\n              </thead>\n              <tbody>\n                {materiales.map((materialId, index) => (\n                  <tr key={index}>\n                    <td>{materialId}</td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n          <div className=\"\">\n            <label>Cantidades</label>\n            <table>\n              <thead>\n                <tr>\n                  <th>Cantidad</th>\n                </tr>\n              </thead>\n              <tbody>\n                {Array.from({ length: materiales.length }).map((_, index) => (\n                  <tr key={index}>\n                    <td>\n                      <input\n                        type=\"number\"\n                        value={cantidades[index]}\n                        onChange={(e) => handleCantidadChange(index, e)}\n                        placeholder=\"Ingrese un número\"\n                      />\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n\n        <div className=\"form-group\">\n          <label>Fecha</label>\n          <input\n            type=\"date\"\n            name=\"fecha\"\n            value={formData.fecha}\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"form-group\">\n          <label>Archivo de Imagen</label>\n          <input\n            type=\"file\"\n            name=\"archivoImagen\"\n            accept=\"image/*\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"form-group\">\n          <label>Descripción</label>\n          <input\n            type=\"text\"\n            name=\"descripcion\"\n            value={formData.descripcion}\n            onChange={handleChange}\n          />\n        </div>\n\n        <div className=\"form-group\">\n          <label>Direccion principal</label>\n          <span>\n            {trasformadores.map((transformador) => (\n              <span key={transformador.direccion_principal}>\n                {transformador.direccion_principal}\n              </span>\n            ))}\n          </span>\n        </div>\n\n        {/*message && <p style={{ color: message.startsWith('Error') ? 'red' : 'green' }}>{message}</p>*/}\n\n        <div className=\"form-group\">\n          <button type=\"submit\" className=\"submit-button\">\n            Registrar\n          </button>\n\n          <button type=\"button\" className=\"register-button\" onClick={handleCancelar}>\n            Salir\n          </button>\n        </div>\n      </form>\n\n    </div>\n\n  );\n};\n\n\nexport default RegistrarTransacciones;\n","/home/estudiantes/julian.castanoj/PI2/src/pages/EditarTransformador.jsx",[],[],"/home/estudiantes/julian.castanoj/PI2/src/pages/ProductorGestor.jsx",[],[],"/home/estudiantes/julian.castanoj/PI2/src/pages/EditarProductorGestor.jsx",[],[],"/home/estudiantes/julian.castanoj/PI2/src/pages/RegistrarProductorGestor.jsx",[],[],"/home/estudiantes/julian.castanoj/PI2/src/pages/TransGestorProductor/EditarTransaccion.jsx",[],[],"/home/estudiantes/julian.castanoj/PI2/src/pages/Gestores/EditarGestor.jsx",["194","195"],[],"import React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\n\nconst EditarGestor = () => {\n  const { id } = useParams();\n  const navigate = useNavigate();\n\n  const [formData, setFormData] = useState({\n    nombre: '',\n    capacidad: 0,\n    nit: 0,\n    telefono: 0,\n    direccion: '',\n    estado: true,\n    categoria_municipio: '',\n    municipio: '',\n    correo: '',\n    toneladas_recolectadas: '',\n    puntos_recoleccion: '',\n    mecanismos_recoleccion: '',\n    materiales_recolectados: '',\n  });\n\n  useEffect(() => {\n    const fetchGestorDetails = async () => {\n      try {\n        const response = await fetch(`http://localhost:3000/gestor/${id}`);\n        if (response.ok) {\n          const data = await response.json();\n          setFormData(data);\n        } else {\n          console.error('Error al cargar los detalles del gestor');\n        }\n      } catch (error) {\n        console.error('Error al realizar la solicitud:', error);\n      }\n    };\n    fetchGestorDetails();\n  }, [id]);\n\n  const handleChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    setFormData({\n      ...formData,\n      [name]: type === 'checkbox' ? checked : value,\n    });\n  };\n\n  // Función para manejar el cambio en los puntos de recolección\n  const handlePuntosRecoleccionChange = (e) => {\n    const { value } = e.target;\n    setFormData({\n      ...formData,\n      puntos_recoleccion: value,\n    });\n  };\n\n  // Función para manejar el cambio en los materiales recolectados\n  const handleMaterialesRecolectadosChange = (e) => {\n    const { value } = e.target;\n    setFormData({\n      ...formData,\n      materiales_recolectados: value,\n    });\n  };\n\n  // Funciones para manejar los puntos de recolección\n  const handleEliminarPuntoRecoleccion = (index) => {\n    const nuevosPuntosRecoleccion = formData.puntos_recoleccion.split(', ');\n    nuevosPuntosRecoleccion.splice(index, 1);\n    const nuevosPuntosRecoleccionString = nuevosPuntosRecoleccion.join(', ');\n    setFormData({\n      ...formData,\n      puntos_recoleccion: nuevosPuntosRecoleccionString,\n    });\n  };\n\n  const handleAgregarPuntoRecoleccion = () => {\n    const nuevosPuntosRecoleccion = formData.puntos_recoleccion.split(', ');\n    nuevosPuntosRecoleccion.push('');\n    const nuevosPuntosRecoleccionString = nuevosPuntosRecoleccion.join(', ');\n    setFormData({\n      ...formData,\n      puntos_recoleccion: nuevosPuntosRecoleccionString,\n    });\n  };\n\n  \n  const materiales = [\n    'Papel',\n    'Cartón',\n    'Vidrio',\n    'Plástico Rígido',\n    'Plástico Flexible',\n  ];\n\n  // Función para manejar el cambio en los materiales recolectados\n  const handleMaterialChange = (e) => {\n    const { name, checked } = e.target;\n    let materialesSeleccionados = formData.materiales_recolectados.split(', ');\n    if (checked) {\n      materialesSeleccionados.push(name);\n    } else {\n      materialesSeleccionados = materialesSeleccionados.filter((material) => material !== name);\n    }\n    const materialesSeleccionadosString = materialesSeleccionados.join(', ');\n    setFormData({\n      ...formData,\n      materiales_recolectados: materialesSeleccionadosString,\n    });\n  };\n\n  const handleGuardarCambios = () => {\n    navigate('/gestores');\n    const actualizarGestor = async () => {\n      try {\n        const response = await fetch(`http://localhost:3000/gestor/${id}`, {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(formData),\n        });\n        if (response.ok) {\n          navigate('/gestores');\n        } else {\n          const responseData = await response.json();\n          console.error('Error al actualizar el gestor:', responseData.error);\n        }\n      } catch (error) {\n        console.error('Error al realizar la solicitud:', error);\n      }\n    };\n\n    actualizarGestor();\n  };\n\n  const handleCancelar = () => {\n    navigate('/gestores');\n  };\n\n  return (\n    <div className=\"registrar-miembros-page\">\n      <h2>Formulario de Edición de Gestores</h2>\n      <form onSubmit={handleGuardarCambios}>\n        <div className=\"form-group\">\n          <label>Nombre</label>\n          <input\n            type=\"text\"\n            name=\"nombre\"\n            value={formData.nombre}\n            onChange={handleChange}\n          />\n        </div>\n\n        <div className=\"form-group\">\n          <label>Correo</label>\n          <input\n            type=\"text\"\n            name=\"correo\"\n            value={formData.correo}\n            onChange={handleChange}\n          />\n        </div>\n\n        <div className=\"form-group\">\n          <label>NIT</label>\n          <input\n            type=\"number\"\n            name=\"nit\"\n            value={formData.nit}\n            onChange={handleChange}\n          />\n        </div>\n\n        <div className=\"form-group\">\n          <label>Teléfono</label>\n          <input\n            type=\"number\"\n            name=\"telefono\"\n            value={formData.telefono}\n            onChange={handleChange}\n          />\n        </div>\n\n        <div className=\"form-group\">\n          <label>Dirección</label>\n          <input\n            type=\"text\"\n            name=\"direccion\"\n            value={formData.direccion}\n            onChange={handleChange}\n          />\n        </div>\n\n        <div className=\"form-group\">\n          <label>Capacidad</label>\n          <input\n            type=\"number\"\n            name=\"capacidad\"\n            value={formData.capacidad}\n            onChange={handleChange}\n          />\n        </div>\n\n        <div className=\"form-group\">\n          <label>Estado</label>\n          <select\n            name=\"estado\"\n            value={formData.estado ? \"activo\" : \"inactivo\"}\n            onChange={(e) => setFormData({ ...formData, estado: e.target.value === \"activo\" })}\n          >\n            <option value=\"activo\">Activo</option>\n            <option value=\"inactivo\">Inactivo</option>\n          </select>\n        </div>\n\n        <div className=\"form-group\">\n          <label>Municipio</label>\n          <input\n            type=\"text\"\n            name=\"municipio\"\n            value={formData.municipio}\n            onChange={handleChange}\n          />\n        </div>\n\n        <div className=\"form-group\">\n          <label>Categoría Municipio</label>\n          <select\n            name=\"categoria_municipio\"\n            value={formData.categoria_municipio}\n            onChange={handleChange}\n          >\n            <option value=\"1\">Categoría 1</option>\n            <option value=\"2\">Categoría 2</option>\n            <option value=\"3\">Categoría 3</option>\n            <option value=\"4\">Categoría 4</option>\n            <option value=\"5\">Categoría 5</option>\n            <option value=\"6\">Categoría 6</option>\n          </select>\n        </div>\n\n        <div className=\"form-group\">\n          <label>Puntos de Recolección</label>\n          <table>\n            <thead>\n              <tr>\n                <th>Punto</th>\n                <th>Eliminar</th>\n              </tr>\n            </thead>\n            <tbody>\n              {formData.puntos_recoleccion.split(', ').map((punto, index) => (\n                <tr key={index}>\n                  <td>\n                    <input\n                      type=\"text\"\n                      name=\"puntos_recoleccion\"\n                      value={punto}\n                      onChange={(e) => {\n                        const nuevosPuntosRecoleccion = formData.puntos_recoleccion.split(', ');\n                        nuevosPuntosRecoleccion[index] = e.target.value;\n                        const nuevosPuntosRecoleccionString = nuevosPuntosRecoleccion.join(', ');\n                        setFormData({\n                          ...formData,\n                          puntos_recoleccion: nuevosPuntosRecoleccionString,\n                        });\n                      }}\n                    />\n                  </td>\n                  <td>\n                    {formData.puntos_recoleccion.split(', ').length > 1 && (\n                      <button\n                        type=\"button\"\n                        className=\"eliminar-button\"\n                        onClick={() => handleEliminarPuntoRecoleccion(index)}\n                      >\n                        Eliminar\n                      </button>\n                    )}\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n          <button type=\"button\" onClick={handleAgregarPuntoRecoleccion}>\n            Agregar Punto\n          </button>\n        </div>\n\n        <div className=\"form-group\">\n          <label>Mecanismos de Recolección</label>\n          <input\n            type=\"text\"\n            name=\"mecanismos_recoleccion\"\n            value={formData.mecanismos_recoleccion}\n            onChange={handleChange}\n          />\n        </div>\n\n        <div className=\"form-group\">\n          <label>Materiales Recolectados</label>\n          <table>\n            <thead>\n              <tr>\n                <th>Material</th>\n                <th>Seleccionar</th>\n              </tr>\n            </thead>\n            <tbody>\n              {materiales.map((material) => (\n                <tr key={material}>\n                  <td>{material}</td>\n                  <td>\n                    <input\n                      type=\"checkbox\"\n                      name={material}\n                      checked={formData.materiales_recolectados.includes(material)}\n                      onChange={handleMaterialChange}\n                    />\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n\n        <div className=\"form-group\">\n          <button type=\"submit\" className=\"submit-button\">\n            Guardar Cambios\n          </button>\n          <button type=\"button\" className=\"register-button\" onClick={handleCancelar}>\n            Salir\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default EditarGestor;\n\n","/home/estudiantes/julian.castanoj/PI2/src/components/Sidebar.jsx",[],[],"/home/estudiantes/julian.castanoj/PI2/src/pages/Productores/EditarProductores.jsx",[],[],"/home/estudiantes/julian.castanoj/PI2/src/components/Navbar.jsx",[],[],"/home/estudiantes/julian.castanoj/PI2/src/pages/TransGestorGestor/GestorGestor.jsx",["196","197","198"],[],"import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport '../../styles/custom-table.css';\n\nconst GestorGestor = () => {\n  const [data, setData] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [searchId, setSearchId] = useState('');\n  const itemsPerPage = 10;\n  const totalPages = Math.ceil(data.length / itemsPerPage);\n  const [filteredData, setFilteredData] = useState([]);\n  const [gestoresData, setGestoresData] = useState([]);\n\n  const fetchGestoresData = async () => {\n    try {\n      const response = await fetch('http://localhost:3000/gestor');\n      if (response.ok) {\n        const result = await response.json();\n        console.log('Gestores Data:', result); // Agrega este console log\n        setGestoresData(result);\n      } else {\n        console.error('Error al cargar datos de la API de gestores');\n      }\n    } catch (error) {\n      console.error('Error al realizar la solicitud de gestores:', error);\n    }\n  };\n\n  const fetchData = async () => {\n    try {\n      const response = await fetch('http://localhost:3000/transacciongg');\n      if (response.ok) {\n        const result = await response.json();\n        setData(result);\n      } else {\n        console.error('Error al cargar datos de la API de transaccionesgg');\n      }\n    } catch (error) {\n      console.error('Error al realizar la solicitud de transaccionesgg:', error);\n    }\n  };\n\n  useEffect(() => {\n    const fetchDataAndGestores = async () => {\n      try {\n        const [transaccionesResponse, gestoresResponse] = await Promise.all([\n          fetch('http://localhost:3000/transacciongg'),\n          fetch('http://localhost:3000/gestor')\n        ]);\n\n        if (transaccionesResponse.ok && gestoresResponse.ok) {\n          const transaccionesResult = await transaccionesResponse.json();\n          const gestoresResult = await gestoresResponse.json();\n\n          setData(transaccionesResult);\n          setGestoresData(gestoresResult);\n\n          console.log('Transacciones Data:', transaccionesResult);\n          console.log('Gestores Data:', gestoresResult);\n        } else {\n          console.error('Error al cargar datos de la API');\n        }\n      } catch (error) {\n        console.error('Error al realizar la solicitud:', error);\n      }\n    };\n\n    fetchDataAndGestores();\n  }, []);\n\n  const handlePageChange = (newPage) => {\n    setCurrentPage(newPage);\n  };\n\n  useEffect(() => {\n    const filtered = data.filter((item) =>\n      item.id.toString().includes(searchId)\n    );\n\n    setFilteredData(filtered);\n  }, [searchId, data]);\n\n  const paginatedData = filteredData.slice(\n    (currentPage - 1) * itemsPerPage,\n    currentPage * itemsPerPage\n  );\n\n  const getGestorNameById = (gestor) => {\n    return gestor ? gestor.nombre : 'Nombre no encontrado';\n  };\n\n  return (\n    <div className=\"about-page\">\n      <h1 className=\"page-title\">Gestor Gestor</h1>\n      <div className=\"search-bar\">\n        <input\n          type=\"text\"\n          placeholder=\"Buscar por ID\"\n          value={searchId}\n          onChange={(e) => setSearchId(e.target.value)}\n          className=\"search-input\"\n        />\n      </div>\n      <table className=\"custom-table\">\n        <thead>\n          <tr>\n            <th>Gestor Realiza</th>\n            <th>Gestor Recibe</th>\n            <th>Material</th>\n            <th>Cantidad</th>\n            <th>Fecha</th>\n            <th>Descripción</th>\n            <th>Ubicación</th>\n            <th>Acciones</th>\n          </tr>\n        </thead>\n        <tbody>\n          {paginatedData.map((item) => (\n            <tr key={item.id}>\n              <td>{getGestorNameById(item.gestor_realiza)}</td>\n              <td>{getGestorNameById(item.gestor_recibe)}</td>\n              <td>{item.materialId}</td>\n              <td>{item.cantidad}</td>\n              <td>{item.fecha}</td>\n              <td>{item.descripcion}</td>\n              <td>{item.ubicacion}</td>\n              <td>\n                <Link to={`/editarGestorGestor/${item.id}`}>\n                  <button>Editar</button>\n                </Link>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n\n      <div className=\"pagination\">\n        <button\n          onClick={() => handlePageChange(currentPage - 1)}\n          disabled={currentPage === 1}\n        >\n          Anterior\n        </button>\n        <span>Página {currentPage} de {totalPages}</span>\n        <button\n          onClick={() => handlePageChange(currentPage + 1)}\n          disabled={currentPage === totalPages}\n        >\n          Siguiente\n        </button>\n      </div>\n\n      <div className=\"action-buttons\">\n        <Link to=\"/registrarGestorGestor\" className=\"register-button\">\n          Registrar Transacción Gestor Gestor\n        </Link>\n      </div>\n    </div>\n  );\n};\n\nexport default GestorGestor;\n\n\n\n\n","/home/estudiantes/julian.castanoj/PI2/src/pages/TransGestorGestor/EditarGestorGestor.jsx",[],[],"/home/estudiantes/julian.castanoj/PI2/src/pages/TransGestorGestor/RegistrarGestorGestor.jsx",["199","200","201","202","203"],[],"//imagen not null\n\n/*const handleSubmit = async (e) => {\n  e.preventDefault();\n\n  const userConfirmed = window.confirm(\"¿Estás seguro de que deseas enviar el formulario?\");\n\n  if (userConfirmed) {\n    const form = new FormData();\n    for (const key in formData) {\n     if (key === 'imagen') {\n        form.append(key, formData[key], formData[key].name);\n      } else {\n        form.append(key, formData[key]);\n      }\n    }\n\n    const requestOptions = {\n      method: 'POST',\n      body: form,\n    };\n\n    try {\n      const response = await fetch('http://localhost:3000/transacciongg', requestOptions);\n\n      if (response.ok) {\n        console.log('Registro exitoso');\n        fetchData();\n      } else {\n        console.error('Error al registrar');\n        setErrores([...errores, 'Error al registrar: Hubo un problema al registrar el formulario.']);\n      }\n    } catch (error) {\n      console.error('Error al realizar la solicitud:', error);\n      setErrores([...errores, 'Error al realizar la solicitud: ' + error.message]);\n    }\n  } else {\n    console.log('Envío del formulario cancelado');\n  }\n};*/\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport '../../styles/registrarTransacciones.css';\nimport { useNavigate } from 'react-router-dom';\n\nconst RegistrarGestorGestor = () => {\n  const [formData, setFormData] = useState({\n    gestor_realiza: '',\n    gestor_recibe: '',\n    material: '',\n    cantidad: '',\n    fecha: '',\n    archivoImagen: null,\n    descripcion: '',\n    ubicacion: '',\n  });\n\n  const [registros, setRegistros] = useState([]);\n  const [editandoId, setEditandoId] = useState(null);\n  const [message, setMessage] = useState(null);\n  const [gestorNombres, setGestorNombres] = useState([]);\n  const [materiales, setMateriales] = useState([]);\n  const [gestores, setGestores] = useState([]);\n  const navigate = useNavigate();\n  const [puntosRecoleccion, setPuntosRecoleccion] = useState([]);\n  const [cantidades, setCantidades] = useState(Array.from({ length: materiales.length }, () => ''));\n\n  const fetchData = useCallback(async () => {\n    try {\n      const response = await fetch('http://localhost:3000/transacciongg');\n      if (response.ok) {\n        const result = await response.json();\n        setRegistros(result);\n      } else {\n        console.error('Error al cargar datos de la API');\n      }\n    } catch (error) {\n      console.error('Error al realizar la solicitud:', error);\n    }\n  }, []);\n\n  useEffect(() => {\n    fetchData();\n    fetch('http://localhost:3000/gestor')\n      .then((response) => response.json())\n      .then((data) => setGestores(data))\n      .catch((error) => console.error('Error al obtener la lista de gestores:', error));\n  }, []);\n\n  useEffect(() => {\n    if (formData.gestor_realiza && formData.gestor_recibe) {\n      const commonMaterials = gestores\n        .find((gestor) => gestor.id === formData.gestor_realiza)?.materiales_recolectados\n        .split(',')\n        .map((material) => material.trim())\n        .filter((material) =>\n          gestores.find((gestor) => gestor.id === formData.gestor_recibe)?.materiales_recolectados\n            .split(',')\n            .map((m) => m.trim())\n            .includes(material)\n        );\n\n      setMateriales(commonMaterials);\n      setCantidades(Array.from({ length: commonMaterials.length }, () => ''));\n    }\n  }, [formData.gestor_realiza, formData.gestor_recibe, gestores]);\n\n  const handleMaterialChange = (e) => {\n    const selectedMaterial = e.target.value;\n    setFormData((prevFormData) => ({\n      ...prevFormData,\n      material: selectedMaterial,\n    }));\n  \n    setMateriales((prevMateriales) => [...prevMateriales, selectedMaterial]);\n  };\n\n\n  const fetchMaterials = (gestorId) => {\n    const parsedId = parseInt(gestorId);\n    if (!isNaN(parsedId)) {\n      fetch(`http://localhost:3000/gestor/${parsedId}`)\n      .then((response) => response.json())\n      .then((data) => {\n        if (data && data.materiales_recolectados) {\n          const materialList = data.materiales_recolectados.split(',').map(materialId => materialId.trim());\n          setMateriales(materialList);\n        }\n      })\n      .catch((error) => console.error('Error al obtener la lista de materiales:', error));\n    } else {\n      console.error('El ID seleccionado no es válido:', gestorId);\n    }\n  };\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n  \n    setFormData((prevFormData) => ({\n      ...prevFormData,\n      [name]: value,\n    }));\n  };\n\n  const handleCantidadChange = (index, event) => {\n    const newValue = event.target.value;\n\n    setCantidades((prevCantidades) => {\n      const updatedCantidades = [...prevCantidades];\n      updatedCantidades[index] = newValue;\n\n      const cantidadesString = updatedCantidades.join(', ');\n      setFormData((prevFormData) => ({\n        ...prevFormData,\n        cantidad: cantidadesString,\n      }));\n\n      return updatedCantidades;\n    });\n  };\n\n  const handleGestorRealizaIdChange = async (e) => {\n    const selectedId = e.target.value;\n    if (selectedId !== \"0\") {\n      const parsedId = parseInt(selectedId);\n      if (!isNaN(parsedId)) {\n        try {\n          const response = await fetch(`http://localhost:3000/gestor/${parsedId}`);\n          if (response.ok) {\n            const data = await response.json();\n            setFormData({\n              ...formData,\n              gestor_realiza: data.id,\n            });\n            fetchMaterials(parsedId);\n          } else {\n            console.error('Error al obtener los detalles del gestor realiza:', response.status);\n          }\n        } catch (error) {\n          console.error('Error al obtener los detalles del gestor realiza:', error);\n        }\n      } else {\n        console.error('El ID seleccionado no es válido:', selectedId);\n      }\n    }\n  };\n\n  const handleGestorRecibeIdChange = async (e) => {\n    const selectedId = e.target.value;\n    if (selectedId !== \"0\") {\n      const parsedId = parseInt(selectedId);\n      if (!isNaN(parsedId)) {\n        try {\n          const response = await fetch(`http://localhost:3000/gestor/${parsedId}`);\n          if (response.ok) {\n            const data = await response.json();\n            setFormData({\n              ...formData,\n              gestor_recibe: data.id,\n            });\n            fetchPuntosRecoleccion(parsedId);\n          } else {\n            console.error('Error al obtener los detalles del gestor recibe:', response.status);\n          }\n        } catch (error) {\n          console.error('Error al obtener los detalles del gestor recibe:', error);\n        }\n      } else {\n        console.error('El ID seleccionado no es válido:', selectedId);\n      }\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    console.log(formData);\n  \n    if (window.confirm(\"¿Estás seguro de que deseas enviar el formulario?\")) {\n      try {\n        const requestBody = {\n          ...formData,\n          cantidad: cantidades.join(', '),\n          material: materiales.join(', '),\n        };\n  \n        const requestOptions = {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(requestBody),\n        };\n  \n        const response = await fetch('http://localhost:3000/transacciones', requestOptions);\n  \n        if (response.ok) {\n          console.log('Registro exitoso');\n          fetchData();\n  \n          setFormData({\n            gestor_realiza: '',\n            gestor_recibe: '',\n            cantidad: '',\n            fecha: '',\n            archivoImagen: null,\n            descripcion: '',\n            ubicacion: '',\n          });\n        } else {\n          if (response.status === 400) {\n            const errorData = await response.json();\n            setMessage(`Error al registrar: ${errorData.message}`);\n          } else {\n            setMessage('Error al registrar. Por favor, intenta de nuevo.');\n          }\n        }\n      } catch (error) {\n        console.error('Error al realizar la solicitud:', error);\n        setMessage('Error de red. Por favor, verifica tu conexión.');\n      }\n    } else {\n      console.log('Envío del formulario cancelado');\n    }\n  };\n  \n  \n  \n  const editarRegistro = (id) => {\n    \n    setEditandoId(id);\n  };\n\n  const guardarEdicion = async () => {\n    navigate('/gestorGestor');\n    const requestOptions = {\n      method: 'PUT',\n      body: JSON.stringify(formData),\n      headers: { 'Content-Type': 'application/json' },\n    };\n\n    try {\n      const response = await fetch(`http://localhost:3000/transacciongg/${editandoId}`, requestOptions);\n\n      if (response.ok) {\n        console.log('Edición exitosa');\n        fetchData();\n        setEditandoId(null);\n      } else {\n        console.error('Error al editar el registro');\n      }\n    } catch (error) {\n      console.error('Error al realizar la solicitud:', error);\n    }\n  };\n\n  const eliminarRegistro = async (id) => {\n    try {\n      const response = await fetch(`http://localhost:3000/transacciongg/${id}`, {\n        method: 'DELETE',\n      });\n\n      if (response.ok) {\n        console.log('Eliminación exitosa');\n        fetchData();\n      } else {\n        console.error('Error al eliminar el registro');\n      }\n    } catch (error) {\n      console.error('Error al realizar la solicitud:', error);\n    }\n  };\n\n  const handleCancelar = () => {\n    navigate('/gestorGestor');\n  };\n\n  const fetchPuntosRecoleccion = (gestorId) => {\n    fetch(`http://localhost:3000/gestor/${gestorId}`)\n      .then((response) => response.json())\n      .then((data) => {\n        if (data && data.puntos_recoleccion) {\n          const puntosRecoleccionList = data.puntos_recoleccion.split(',').map(punto => punto.trim());\n          setPuntosRecoleccion(puntosRecoleccionList);\n        } else {\n          console.log('No se encontraron datos de puntos de recolección en la respuesta:', data);\n        }\n      })\n      .catch((error) => console.error('Error al obtener la lista de puntos de recolección:', error));\n  };\n\n  return (\n    <div className=\"registrar-miembros-page\">\n      <h2>Formulario de Registro de Transacción - Gestor Gestor</h2>\n      <form onSubmit={handleSubmit}>\n        <div className=\"form-group\">\n          <label>Gestor Realiza</label>\n          <select\n            name=\"gestor_realiza\"\n            value={formData.gestor_realiza}\n            onChange={handleGestorRealizaIdChange}\n          >\n            <option value=\"\">Selecciona un gestor realiza</option>\n            {gestores.map((gestor) => (\n              <option key={gestor.id} value={gestor.id}>\n                {`${gestor.id} - ${gestor.nombre}`}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        <div className=\"form-group\">\n          <label>Gestor Recibe</label>\n          <select\n            name=\"gestor_recibe\"\n            value={formData.gestor_recibe}\n            onChange={handleGestorRecibeIdChange}\n          >\n            <option value=\"\">Selecciona un gestor recibe</option>\n            {gestores.map((gestor) => (\n              <option key={gestor.id} value={gestor.id}>\n                {`${gestor.id} - ${gestor.nombre}`}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        <div className=\"\">\n          <div className=\"\">\n            <label>Materiales Asociados</label>\n            <table>\n              <thead>\n                <tr>\n                  <th>Material</th>\n                </tr>\n              </thead>\n              <tbody>\n                {materiales.map((materialId, index) => (\n                  <tr key={index}>\n                    <td>{materialId}</td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n          <div className=\"\">\n            <label>Cantidades</label>\n            <table>\n              <thead>\n                <tr>\n                  <th>Cantidad</th>\n                </tr>\n              </thead>\n              <tbody>\n                {Array.from({ length: materiales.length }).map((_, index) => (\n                  <tr key={index}>\n                    <td>\n                      <input\n                        type=\"number\"\n                        value={cantidades[index]}\n                        onChange={(e) => handleCantidadChange(index, e)}\n                        placeholder=\"Ingrese un número\"\n                      />\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n\n        <div className=\"form-group\">\n          <label>Fecha</label>\n          <input\n            type=\"date\"\n            name=\"fecha\"\n            value={formData.fecha}\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"form-group\">\n          <label>Archivo de Imagen</label>\n          <input\n            type=\"file\"\n            name=\"archivoImagen\"\n            accept=\"image/*\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"form-group\">\n          <label>Descripción</label>\n          <input\n            type=\"text\"\n            name=\"descripcion\"\n            value={formData.descripcion}\n            onChange={handleChange}\n          />\n        </div>\n\n        <div className=\"form-group\">\n          <label>Ubicación</label>\n          <select\n            name=\"ubicacion\"\n            value={formData.ubicacion}\n            onChange={handleChange}\n          >\n            <option value=\"\">Selecciona un punto de recolección</option>\n            {puntosRecoleccion.map((punto, index) => (\n              <option key={index} value={punto}>\n                {punto}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        {/*message && <p style={{ color: message.startsWith('Error') ? 'red' : 'green' }}>{message}</p>*/}\n\n        <div className=\"form-group\">\n          <button type=\"submit\" className=\"submit-button\">\n            Registrar\n          </button>\n          {editandoId ? (\n            <button onClick={guardarEdicion} className=\"edit-button\">\n              Guardar Edición\n            </button>\n          ) : null}\n          <button type=\"button\" className=\"register-button\" onClick={handleCancelar}>\n            Salir\n          </button>\n        </div>\n      </form>\n\n      <h2>Registros</h2>\n      <ul>\n        {registros.slice(-5).map((registro) => (\n          <li key={registro.id}>\n            <span>{registro.materialId}</span>\n            <button onClick={() => editarRegistro(registro.id)} className=\"edit-button\">\n              Editar\n            </button>\n            <button onClick={() => eliminarRegistro(registro.id)} className=\"delete-button\">\n              Eliminar\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default RegistrarGestorGestor;\n\n","/home/estudiantes/julian.castanoj/PI2/src/pages/TransGestorExterno/EditarGestorEntidadExterna.jsx",["204"],[],"import React, { useState, useEffect } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\n\nconst EditarGestorEntidadExterna = () => {\n  const { id } = useParams();\n  const navigate = useNavigate();\n  const [formData, setFormData] = useState({\n    gestor_id: 0,\n    material: '',\n    cantidad: 0,\n    fecha: '',\n    archivoImagen: null,\n    entidad_externa: '',\n    descripcion: '',\n    ubicacion: '',\n  });\n  const [gestorIds, setGestorIds] = useState([]);\n  const [materiales, setMateriales] = useState([]);\n  const [cantidades, setCantidades] = useState([]);\n\n\n  useEffect(() => {\n    fetch('http://localhost:3000/materiales')\n      .then((response) => response.json())\n      .then((data) => setMateriales(data))\n      .catch((error) => console.error('Error al obtener la lista de materiales:', error));\n  }, [id]);\n\n  const handleChange = (e) => {\n    const { name, value, type, files } = e.target;\n    if (type === 'file') {\n      setFormData({\n        ...formData,\n        [name]: files[0],\n      });\n    } else {\n      setFormData({\n        ...formData,\n        [name]: value,\n      });\n    }\n  };\n\n  const guardarEdicion = async () => {\n\n\n    const form = new FormData();\n    for (const key in formData) {\n      if (key === 'archivoImagen') {\n        form.append(key, formData[key], formData[key].name);\n      } else {\n        form.append(key, formData[key]);\n      }\n    }\n\n    const requestOptions = {\n      method: 'PUT',\n      body: form,\n    };\n\n    try {\n      const response = await fetch(`http://localhost:3000/transaccionge/${id}`, requestOptions);\n\n      if (response.ok) {\n        console.log('Edición exitosa');\n        navigate('/gestorEntidadExterna');\n      } else {\n        console.error('Error al editar el registro');\n      }\n    } catch (error) {\n      console.error('Error al realizar la solicitud:', error);\n    }\n  };\n\n  const handleCancelar = () => {\n    navigate('/gestorEntidadExterna');\n  };\n\n  const handleCantidadChange = (index, event) => {\n    const newValue = event.target.value;\n\n    setCantidades((prevCantidades) => {\n      const updatedCantidades = [...prevCantidades];\n      updatedCantidades[index] = newValue;\n\n      // Actualizar directamente el campo 'cantidad' en el estado formData\n      const cantidadesString = updatedCantidades.join(', ');\n      setFormData((prevFormData) => ({\n        ...prevFormData,\n        cantidad: cantidadesString,\n      }));\n\n      return updatedCantidades;\n    });\n  };\n\n  return (\n    <div className=\"editar-registro-page\">\n      <h2>Editar Registro de Transacción - Entidad Externa</h2>\n      <form>\n        <div className=\"form-group\">\n          <label>Gestor ID</label>\n          <select name=\"gestor_id\" value={formData.gestor_id} onChange={handleChange}>\n            <option value={0}>Selecciona un gestor</option>\n            {gestorIds.map((gestorId) => (\n              <option key={gestorId} value={gestorId}>\n                {gestorId}\n              </option>\n            ))}\n          </select>\n        </div>\n\n\n        <div className=\"\">\n          <div className=\"\">\n            <label>Materiales Asociados</label>\n            <table>\n              <thead>\n                <tr>\n                  <th>Material</th>\n                </tr>\n              </thead>\n              <tbody>\n                {materiales.map((material, index) => (\n                  <tr key={index}>\n                    <td>{material}</td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n          <div className=\"\">\n            <label>Cantidades</label>\n            <table>\n              <thead>\n                <tr>\n                  <th>Cantidad</th>\n                </tr>\n              </thead>\n              <tbody>\n                {cantidades.map((cantidad, index) => (\n                  <tr key={index}>\n                    <td>\n                      <input\n                        type=\"number\"\n                        value={cantidad}\n                        onChange={(e) => handleCantidadChange(index, e)}\n                        placeholder=\"Ingrese un número\"\n                      />\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n\n\n\n        <div className=\"form-group\">\n          <label>Fecha</label>\n          <input\n            type=\"date\"\n            name=\"fecha\"\n            value={formData.fecha}\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"form-group\">\n          <label>Archivo de Imagen</label>\n          <input\n            type=\"file\"\n            name=\"archivoImagen\"\n            accept=\"image/*\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"form-group\">\n          <label>Entidad Externa</label>\n          <input\n            type=\"text\"\n            name=\"entidad_externa\"\n            value={formData.entidad_externa}\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"form-group\">\n          <label>Descripción</label>\n          <input\n            type=\"text\"\n            name=\"descripcion\"\n            value={formData.descripcion}\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"form-group\">\n          <label>Ubicación</label>\n          <input\n            type=\"text\"\n            name=\"ubicacion\"\n            value={formData.ubicacion}\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"form-group\">\n          <button type=\"button\" className=\"submit-button\" onClick={guardarEdicion}>\n            Guardar Edición\n          </button>\n          <button type=\"button\" className=\"register-button\" onClick={handleCancelar}>\n            Cancelar\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default EditarGestorEntidadExterna;\n","/home/estudiantes/julian.castanoj/PI2/src/pages/TransGestorExterno/GestorEntidadExterna.jsx",["205"],[],"import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\n\nconst GestorEntidadExterna = () => {\n  const [data, setData] = useState([]);\n  const [gestoresData, setGestoresData] = useState([]); // Estado para almacenar los datos de los gestores\n  const [currentPage, setCurrentPage] = useState(1);\n  const [searchId, setSearchId] = useState('');\n  const itemsPerPage = 10;\n  const totalPages = Math.ceil(data.length / itemsPerPage);\n  const [filteredData, setFilteredData] = useState([]);\n  const [error, setError] = useState(null);\n\n  const fetchData = async () => {\n    try {\n      const transacciongeResponse = await fetch('http://localhost:3000/transaccionge');\n      const gestoresResponse = await fetch('http://localhost:3000/gestor'); \n  \n      if (transacciongeResponse.ok && gestoresResponse.ok) {\n        const transacciongeResult = await transacciongeResponse.json();\n        const gestoresResult = await gestoresResponse.json();\n  \n        setData(transacciongeResult);\n        setGestoresData(gestoresResult);\n  \n        \n  \n        setError(null);\n      } else {\n        console.error('Error al cargar datos de la API');\n        setError('Error al cargar datos de la API');\n      }\n    } catch (error) {\n      console.error('Error al realizar la solicitud:', error);\n      setError('Error al realizar la solicitud');\n    }\n  };\n  \n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const handlePageChange = (newPage) => {\n    setCurrentPage(newPage);\n  };\n\n  useEffect(() => {\n    const filtered = data.filter((item) =>\n      item.id.toString().includes(searchId)\n    );\n\n    setFilteredData(filtered);\n  }, [searchId, data]);\n\n  const paginatedData = filteredData.slice(\n    (currentPage - 1) * itemsPerPage,\n    currentPage * itemsPerPage\n  );\n\n  const getGestorNameById = (gestor_recibe) => {\n    const gestor = gestoresData.find((gestor) => gestor.id === Number(gestor_recibe));\n    return gestor ? gestor.nombre : 'Nombre no encontrado';\n  };\n\n  return (\n    <div className=\"about-page\">\n      <h1 className=\"page-title\">Gestor Entidad Externa</h1>\n\n      {error && (\n        <div className=\"error-message\">\n          Error: {error}\n        </div>\n      )}\n\n      <div className=\"search-bar\">\n        <input\n          type=\"text\"\n          placeholder=\"Buscar por ID\"\n          value={searchId}\n          onChange={(e) => setSearchId(e.target.value)}\n          className=\"search-input\"\n        />\n      </div>\n      <table className=\"custom-table\">\n        <thead>\n          <tr>\n            <th>Gestor</th>\n            <th>Material</th>\n            <th>Cantidad</th>\n            <th>Fecha</th>\n            <th>Archivo de Imagen</th>\n            <th>Nombre de Entidad</th>\n            <th>Descripción</th>\n            <th>Ubicación</th>\n            <th>Acciones</th>\n          </tr>\n        </thead>\n        <tbody>\n          {paginatedData.map((item) => (\n            <tr key={item.id}>\n              <td>{item.gestor ? item.gestor.nombre : 'Nombre no encontrado'}</td>\n              <td>{item.material}</td>\n              <td>{item.cantidad}</td>\n              <td>{item.fecha}</td>\n              <td>{item.archivoImagen ? item.archivoImagen : 'NULL'}</td>\n              <td>{item.entidad_externa}</td>\n              <td>{item.descripcion}</td>\n              <td>{item.ubicacion}</td>\n              <td>\n                <Link to={`/editarGestorEntidadExterna/${item.id}`}>\n                  <button>Editar</button>\n                </Link>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n\n      <div className=\"pagination\">\n        <button\n          onClick={() => handlePageChange(currentPage - 1)}\n          disabled={currentPage === 1}\n        >\n          Anterior\n        </button>\n        <span>Página {currentPage} de {totalPages}</span>\n        <button\n          onClick={() => handlePageChange(currentPage + 1)}\n          disabled={currentPage === totalPages}\n        >\n          Siguiente\n        </button>\n      </div>\n\n      <div className=\"action-buttons\">\n        <Link to=\"/registrarGestorEntidadExterna\" className=\"register-button\">\n          Registrar Transacción Gestor Entidad Externa\n        </Link>\n      </div>\n    </div>\n  );\n};\n\nexport default GestorEntidadExterna;\n\n\n","/home/estudiantes/julian.castanoj/PI2/src/pages/TransGestorExterno/RegistrarGestorEntidadExterna.jsx",["206","207","208","209","210","211"],[],"\nimport React, { useState, useEffect, useCallback } from 'react';\nimport '../../styles/registrarTransacciones.css';\nimport { useNavigate } from 'react-router-dom';\n\nconst RegistrarGestorEntidadExterna = () => {\n  const [formData, setFormData] = useState({\n    gestorId: '',\n    gestor_recibe: '',\n    material: '',\n    cantidad: '',\n    fecha: '',\n    archivoImagen: null,\n    entidad_externa: '',\n    descripcion: '',\n    ubicacion: '',\n  });\n\n  const [registros, setRegistros] = useState([]);\n  const [editandoId, setEditandoId] = useState(null);\n  const [message, setMessage] = useState(null);\n  const [gestorNombres, setGestorNombres] = useState([]); // Agregar estado para nombres\n  const [materiales, setMateriales] = useState([]);\n  const [gestores, setGestores] = useState([]);\n  const navigate = useNavigate();\n  const [puntosRecoleccion, setPuntosRecoleccion] = useState([]);\n  const [cantidades, setCantidades] = useState(Array.from({ length: materiales.length }, () => ''));\n\n  const fetchData = useCallback(async () => {\n    try {\n      const response = await fetch('http://localhost:3000/transaccionge');\n      if (response.ok) {\n        const result = await response.json();\n        setRegistros(result);\n      } else {\n        console.error('Error al cargar datos de la API');\n      }\n    } catch (error) {\n      console.error('Error al realizar la solicitud:', error);\n    }\n  }, []);\n\n  useEffect(() => {\n    fetchData();\n    fetch('http://localhost:3000/gestor')\n      .then((response) => response.json())\n      .then((data) => setGestores(data))\n      .catch((error) => console.error('Error al obtener la lista de gestores:', error));\n  }, []);\n\n  useEffect(() => {\n    if (formData.gestorId) {\n      fetchMaterials(formData.gestorId);\n      fetchPuntosRecoleccion(formData.gestorId);\n    }\n  }, [formData.gestorId]);\n\n  const fetchMaterials = (gestorId) => {\n    const parsedId = parseInt(gestorId);\n    if (!isNaN(parsedId)) {\n      fetch(`http://localhost:3000/gestor/${parsedId}`)\n        .then((response) => response.json())\n        .then((data) => {\n          if (data && data.materiales_recolectados) {\n            const materialList = data.materiales_recolectados.split(',').map(material => material.trim());\n\n            // Actualizar el estado 'materiales'\n            setMateriales(materialList);\n\n            // Actualizar el estado 'material' con la cadena de materiales separados por \", \"\n            setFormData({\n              ...formData,\n              material: materialList.join(', '),\n            });\n          }\n        })\n        .catch((error) => console.error('Error al obtener la lista de materiales:', error));\n    } else {\n      console.error('El ID seleccionado no es válido:', gestorId);\n    }\n  };\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n\n    setFormData((prevFormData) => ({\n      ...prevFormData,\n      [name]: value,\n    }));\n  };\n\n  const handleCantidadChange = (index, event) => {\n    const newValue = event.target.value;\n\n    setCantidades((prevCantidades) => {\n      const updatedCantidades = [...prevCantidades];\n      updatedCantidades[index] = newValue;\n\n      // Actualizar directamente el campo 'cantidad' en el estado formData\n      const cantidadesString = updatedCantidades.join(', ');\n      setFormData((prevFormData) => ({\n        ...prevFormData,\n        cantidad: cantidadesString,\n      }));\n\n      return updatedCantidades;\n    });\n  };\n\n\n  const handleGestorIdChange = (e) => {\n    const selectedId = e.target.value;\n    if (selectedId !== \"0\") {\n      // Asegurarse de que selectedId sea un número válido\n      const parsedId = parseInt(selectedId);\n      if (!isNaN(parsedId)) {\n        // Hacer la solicitud para obtener los detalles del gestor por su ID\n        fetch(`http://localhost:3000/gestor/${parsedId}`)\n          .then((response) => response.json())\n          .then((data) => {\n            console.log(data); // Agregar un log para verificar los datos\n            // Actualizar el estado con el nombre del gestor seleccionado\n            setFormData({\n              ...formData,\n              gestor_recibe: data.nombre,\n            });\n          })\n          .catch((error) => console.error('Error al obtener los detalles del gestor:', error));\n      } else {\n        console.error('El ID seleccionado no es válido:', selectedId);\n      }\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    console.log(formData);\n    console.log(materiales);\n    console.log(cantidades);\n    const numericGestorRecibe = isNaN(formData.gestor_recibe) ? formData.gestor_recibe : parseFloat(formData.gestor_recibe);\n    \n    const userConfirmed = window.confirm(\"¿Estás seguro de que deseas enviar el formulario?\");\n    \n    if (userConfirmed) {\n      try {\n        const requestBody = {\n          gestor_recibe: formData.gestorId, // Cambié gestorId a gestor_recibe\n          gestorId: '', // Puedes mantener este valor en blanco si es necesario\n          material: materiales.join(', '),\n          cantidad: cantidades.join(', '),\n          fecha: formData.fecha,\n          archivoImagen: formData.archivoImagen,\n          entidad_externa: formData.entidad_externa,\n          descripcion: formData.descripcion,\n          ubicacion: formData.ubicacion,\n        };\n  \n        const requestOptions = {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(requestBody),\n        };\n  \n        const response = await fetch('http://localhost:3000/transacciones', requestOptions);\n  \n        if (response.ok) {\n          console.log('Registro exitoso');\n          console.log(\"gestor_recibe: \", numericGestorRecibe);\n          fetchData();\n  \n          // Restablecer el estado del formulario\n          setFormData({\n            gestorId: '',\n            gestor_recibe: '',\n            material: '',\n            cantidad: '',\n            fecha: '',\n            archivoImagen: null,\n            entidad_externa: '',\n            descripcion: '',\n            ubicacion: '',\n          });\n        } else {\n          if (response.status === 400) {\n            const errorData = await response.json();\n            setMessage(`Error al registrar: ${errorData.message}`);\n          } else {\n            setMessage('Error al registrar. Por favor, intenta de nuevo.');\n          }\n        }\n      } catch (error) {\n        console.error('Error al realizar la solicitud:', error);\n        setMessage('Error de red. Por favor, verifica tu conexión.');\n      }\n    } else {\n      console.log('Envío del formulario cancelado');\n    }\n  };\n  \n  \n\n  const editarRegistro = (id) => {\n    setEditandoId(id);\n    // Aquí puedes cargar los datos del registro seleccionado para edición si es necesario.\n    // Por ejemplo, puedes realizar una solicitud a la API para obtener los detalles del registro.\n    fetch(`http://localhost:3000/transaccionge/${id}`)\n      .then((response) => response.json())\n      .then((data) => {\n        // Verifica la estructura de datos y ajusta la lógica según sea necesario\n        const {\n          gestorId,\n          gestor_recibe,\n          material,\n          cantidad,\n          fecha,\n          archivoImagen,\n          entidad_externa,\n          descripcion,\n          ubicacion,\n        } = data;\n  \n        // Actualiza el estado formData con los datos del registro seleccionado\n        setFormData({\n          gestorId,\n          gestor_recibe,\n          material,\n          cantidad,\n          fecha,\n          archivoImagen,\n          entidad_externa,\n          descripcion,\n          ubicacion,\n        });\n      })\n      .catch((error) => console.error('Error al cargar los datos del registro:', error));\n  };\n\n  const guardarEdicion = async () => {\n    navigate('/gestorEntidadExterna');\n    const requestOptions = {\n      method: 'PUT',\n      body: JSON.stringify(formData),\n      headers: { 'Content-Type': 'application/json' },\n    };\n\n    try {\n      const response = await fetch(`http://localhost:3000/http://localhost:3000/transaccionge/${editandoId}`, requestOptions);\n\n      if (response.ok) {\n        console.log('Edición exitosa');\n        fetchData();\n        setEditandoId(null);\n      } else {\n        console.error('Error al editar el registro');\n      }\n    } catch (error) {\n      console.error('Error al realizar la solicitud:', error);\n    }\n  };\n\n  const eliminarRegistro = async (id) => {\n    try {\n      const response = await fetch(`http://localhost:3000/http://localhost:3000/transaccionge/${id}`, {\n        method: 'DELETE',\n      });\n\n      if (response.ok) {\n        console.log('Eliminación exitosa');\n        fetchData();\n      } else {\n        console.error('Error al eliminar el registro');\n      }\n    } catch (error) {\n      console.error('Error al realizar la solicitud:', error);\n    }\n  };\n\n  const handleCancelar = () => {\n    navigate('/gestorEntidadExterna');\n  };\n\n  const fetchPuntosRecoleccion = (gestorId) => {\n    fetch(`http://localhost:3000/gestor/${gestorId}`)\n      .then((response) => response.json())\n      .then((data) => {\n        if (data && data.puntos_recoleccion) {\n          const puntosRecoleccionList = data.puntos_recoleccion.split(',').map(punto => punto.trim());\n          setPuntosRecoleccion(puntosRecoleccionList);\n        } else {\n          console.log('No se encontraron datos de puntos de recolección en la respuesta:', data);\n        }\n      })\n      .catch((error) => console.error('Error al obtener la lista de puntos de recolección:', error));\n  };\n\n\n\n  return (\n    <div className=\"registrar-miembros-page\">\n      <h2>Formulario de Registro de Transacción - Entidad Externa</h2>\n      <form onSubmit={handleSubmit}>\n        <div className=\"form-group\">\n          <label>ID - Nombre del gestor</label>\n          <select\n            name=\"gestorId\"\n            value={formData.gestorId}\n            onChange={handleChange}\n          >\n            <option value=\"\">Selecciona un gestor</option>\n            {gestores.map((gestor) => (\n              <option key={gestor.id} value={gestor.id}>\n                {`${gestor.id} - ${gestor.nombre}`}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        <div className=\"\">\n          <div className=\"\">\n            <label>Materiales Asociados</label>\n            <table>\n              <thead>\n                <tr>\n                  <th>Material</th>\n                </tr>\n              </thead>\n              <tbody>\n                {materiales.map((material, index) => (\n                  <tr key={index}>\n                    <td>{material}</td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n          <div className=\"\">\n            <label>Cantidades</label>\n            <table>\n              <thead>\n                <tr>\n                  <th>Cantidad</th>\n                </tr>\n              </thead>\n              <tbody>\n                {/* Utilizar la longitud de materiales para generar la misma cantidad de filas */}\n                {Array.from({ length: materiales.length }).map((_, index) => (\n                  <tr key={index}>\n                    <td>\n                      <input\n                        type=\"number\"\n                        value={cantidades[index]}\n                        onChange={(e) => handleCantidadChange(index, e)}\n                        placeholder=\"Ingrese un número\"\n                      />\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n\n\n\n        <div className=\"form-group\">\n          <label>Fecha</label>\n          <input\n            type=\"date\"\n            name=\"fecha\"\n            value={formData.fecha}\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"form-group\">\n          <label>Archivo de Imagen</label>\n          <input\n            type=\"file\"\n            name=\"archivoImagen\"\n            accept=\"image/*\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"form-group\">\n          <label>Entidad Externa</label>\n          <input\n            type=\"text\"\n            name=\"entidad_externa\"\n            value={formData.entidad_externa}\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"form-group\">\n          <label>Descripción</label>\n          <input\n            type=\"text\"\n            name=\"descripcion\"\n            value={formData.descripcion}\n            onChange={handleChange}\n          />\n        </div>\n\n\n        <div className=\"form-group\">\n          <label>Ubicación</label>\n          <select\n            name=\"ubicacion\"\n            value={formData.ubicacion}\n            onChange={handleChange}\n          >\n            <option value=\"\">Selecciona un punto de recolección</option>\n            {puntosRecoleccion.map((punto, index) => (\n              <option key={index} value={punto}>\n                {punto}\n              </option>\n            ))}\n          </select>\n        </div>\n\n\n         {/*message && <p style={{ color: message.startsWith('Error') ? 'red' : 'green' }}>{message}</p>*/}\n        <div className=\"form-group\">\n\n          {editandoId ? (\n            <button type=\"button\" className=\"submit-button\" onClick={guardarEdicion}>\n              Guardar Edición\n            </button>\n          ) : (\n            <button type=\"submit\" className=\"submit-button\">\n              Registrar\n            </button>\n          )}\n          <button type=\"button\" className=\"register-button\" onClick={handleCancelar}>\n            Salir\n          </button>\n        </div>\n      </form>\n      <h2>Registros</h2>\n      <ul>\n        {registros.slice(-5).map((registro) => (\n          <li key={registro.id}>\n            <span>{registro.material}, {registro.entidad_externa}</span>\n            <button onClick={() => editarRegistro(registro.id)} className=\"edit-button\">\n              Editar\n            </button>\n            <button onClick={() => eliminarRegistro(registro.id)} className=\"delete-button\">\n              Eliminar\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default RegistrarGestorEntidadExterna;","/home/estudiantes/julian.castanoj/PI2/src/components/StatsLayout.jsx",[],[],"/home/estudiantes/julian.castanoj/PI2/src/pages/Graficas/DoughnutChart.jsx",[],[],"/home/estudiantes/julian.castanoj/PI2/src/pages/Graficas/LineChartG.jsx",[],[],"/home/estudiantes/julian.castanoj/PI2/src/pages/Graficas/BarChart.jsx",[],[],"/home/estudiantes/julian.castanoj/PI2/src/pages/Graficas/LineChartT.jsx",[],[],{"ruleId":"212","replacedBy":"213"},{"ruleId":"214","replacedBy":"215"},{"ruleId":"216","severity":1,"message":"217","line":13,"column":10,"nodeType":"218","messageId":"219","endLine":13,"endColumn":22},{"ruleId":"216","severity":1,"message":"220","line":18,"column":10,"nodeType":"218","messageId":"219","endLine":18,"endColumn":19},{"ruleId":"216","severity":1,"message":"221","line":21,"column":10,"nodeType":"218","messageId":"219","endLine":21,"endColumn":17},{"ruleId":"216","severity":1,"message":"222","line":22,"column":10,"nodeType":"218","messageId":"219","endLine":22,"endColumn":26},{"ruleId":"216","severity":1,"message":"223","line":22,"column":28,"nodeType":"218","messageId":"219","endLine":22,"endColumn":47},{"ruleId":"216","severity":1,"message":"224","line":25,"column":10,"nodeType":"218","messageId":"219","endLine":25,"endColumn":27},{"ruleId":"216","severity":1,"message":"225","line":25,"column":29,"nodeType":"218","messageId":"219","endLine":25,"endColumn":49},{"ruleId":"226","severity":1,"message":"227","line":48,"column":6,"nodeType":"228","endLine":48,"endColumn":8,"suggestions":"229"},{"ruleId":"226","severity":1,"message":"227","line":56,"column":6,"nodeType":"228","endLine":56,"endColumn":8,"suggestions":"230"},{"ruleId":"216","severity":1,"message":"231","line":76,"column":9,"nodeType":"218","messageId":"219","endLine":76,"endColumn":29},{"ruleId":"216","severity":1,"message":"232","line":188,"column":11,"nodeType":"218","messageId":"219","endLine":188,"endColumn":30},{"ruleId":"216","severity":1,"message":"233","line":50,"column":9,"nodeType":"218","messageId":"219","endLine":50,"endColumn":38},{"ruleId":"216","severity":1,"message":"234","line":59,"column":9,"nodeType":"218","messageId":"219","endLine":59,"endColumn":43},{"ruleId":"216","severity":1,"message":"217","line":12,"column":10,"nodeType":"218","messageId":"219","endLine":12,"endColumn":22},{"ruleId":"216","severity":1,"message":"235","line":14,"column":9,"nodeType":"218","messageId":"219","endLine":14,"endColumn":26},{"ruleId":"216","severity":1,"message":"236","line":29,"column":9,"nodeType":"218","messageId":"219","endLine":29,"endColumn":18},{"ruleId":"216","severity":1,"message":"221","line":60,"column":10,"nodeType":"218","messageId":"219","endLine":60,"endColumn":17},{"ruleId":"216","severity":1,"message":"237","line":61,"column":10,"nodeType":"218","messageId":"219","endLine":61,"endColumn":23},{"ruleId":"216","severity":1,"message":"238","line":61,"column":25,"nodeType":"218","messageId":"219","endLine":61,"endColumn":41},{"ruleId":"226","severity":1,"message":"227","line":88,"column":6,"nodeType":"228","endLine":88,"endColumn":8,"suggestions":"239"},{"ruleId":"216","severity":1,"message":"231","line":108,"column":9,"nodeType":"218","messageId":"219","endLine":108,"endColumn":29},{"ruleId":"216","severity":1,"message":"240","line":17,"column":21,"nodeType":"218","messageId":"219","endLine":17,"endColumn":33},{"ruleId":"216","severity":1,"message":"241","line":61,"column":9,"nodeType":"218","messageId":"219","endLine":61,"endColumn":26},{"ruleId":"216","severity":1,"message":"221","line":21,"column":10,"nodeType":"218","messageId":"219","endLine":21,"endColumn":17},{"ruleId":"216","severity":1,"message":"237","line":22,"column":10,"nodeType":"218","messageId":"219","endLine":22,"endColumn":23},{"ruleId":"216","severity":1,"message":"238","line":22,"column":25,"nodeType":"218","messageId":"219","endLine":22,"endColumn":41},{"ruleId":"226","severity":1,"message":"227","line":49,"column":6,"nodeType":"228","endLine":49,"endColumn":8,"suggestions":"242"},{"ruleId":"226","severity":1,"message":"243","line":56,"column":6,"nodeType":"228","endLine":56,"endColumn":25,"suggestions":"244"},{"ruleId":"216","severity":1,"message":"245","line":111,"column":9,"nodeType":"218","messageId":"219","endLine":111,"endColumn":29},"no-native-reassign",["246"],"no-negated-in-lhs",["247"],"no-unused-vars","'gestoresData' is assigned a value but never used.","Identifier","unusedVar","'registros' is assigned a value but never used.","'message' is assigned a value but never used.","'materialesString' is assigned a value but never used.","'setMaterialesString' is assigned a value but never used.","'puntosRecoleccion' is assigned a value but never used.","'setPuntosRecoleccion' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.","ArrayExpression",["248"],["249"],"'handleMaterialChange' is assigned a value but never used.","'numericGestorRecibe' is assigned a value but never used.","'handlePuntosRecoleccionChange' is assigned a value but never used.","'handleMaterialesRecolectadosChange' is assigned a value but never used.","'fetchGestoresData' is assigned a value but never used.","'fetchData' is assigned a value but never used.","'gestorNombres' is assigned a value but never used.","'setGestorNombres' is assigned a value but never used.",["250"],"'setGestorIds' is assigned a value but never used.","'getGestorNameById' is assigned a value but never used.",["251"],"React Hook useEffect has a missing dependency: 'fetchMaterials'. Either include it or remove the dependency array.",["252"],"'handleGestorIdChange' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"253","fix":"254"},{"desc":"253","fix":"255"},{"desc":"253","fix":"256"},{"desc":"253","fix":"257"},{"desc":"258","fix":"259"},"Update the dependencies array to be: [fetchData]",{"range":"260","text":"261"},{"range":"262","text":"261"},{"range":"263","text":"261"},{"range":"264","text":"261"},"Update the dependencies array to be: [fetchMaterials, formData.gestorId]",{"range":"265","text":"266"},[1566,1568],"[fetchData]",[1896,1898],[2709,2711],[1660,1662],[1816,1835],"[fetchMaterials, formData.gestorId]"]