[{"C:\\Users\\JULIAN C\\Desktop\\PI2.6\\PI2\\src\\index.js":"1","C:\\Users\\JULIAN C\\Desktop\\PI2.6\\PI2\\src\\App.js":"2","C:\\Users\\JULIAN C\\Desktop\\PI2.6\\PI2\\src\\reportWebVitals.js":"3","C:\\Users\\JULIAN C\\Desktop\\PI2.6\\PI2\\src\\pages\\Inicio.jsx":"4","C:\\Users\\JULIAN C\\Desktop\\PI2.6\\PI2\\src\\pages\\Transformadores.jsx":"5","C:\\Users\\JULIAN C\\Desktop\\PI2.6\\PI2\\src\\pages\\Logout.jsx":"6","C:\\Users\\JULIAN C\\Desktop\\PI2.6\\PI2\\src\\pages\\RegistrarTransformadores.jsx":"7","C:\\Users\\JULIAN C\\Desktop\\PI2.6\\PI2\\src\\pages\\TransGestorProductor\\RegistrarTransacciones.jsx":"8","C:\\Users\\JULIAN C\\Desktop\\PI2.6\\PI2\\src\\pages\\Productores\\Productores.jsx":"9","C:\\Users\\JULIAN C\\Desktop\\PI2.6\\PI2\\src\\pages\\Gestores\\Gestores.jsx":"10","C:\\Users\\JULIAN C\\Desktop\\PI2.6\\PI2\\src\\pages\\Productores\\RegistrarProductores.jsx":"11","C:\\Users\\JULIAN C\\Desktop\\PI2.6\\PI2\\src\\pages\\TransGestorProductor\\Transacciones.jsx":"12","C:\\Users\\JULIAN C\\Desktop\\PI2.6\\PI2\\src\\pages\\Gestores\\RegistrarGestores.jsx":"13","C:\\Users\\JULIAN C\\Desktop\\PI2.6\\PI2\\src\\pages\\RegistrarProductorGestor.jsx":"14","C:\\Users\\JULIAN C\\Desktop\\PI2.6\\PI2\\src\\pages\\EditarTransformador.jsx":"15","C:\\Users\\JULIAN C\\Desktop\\PI2.6\\PI2\\src\\pages\\EditarProductorGestor.jsx":"16","C:\\Users\\JULIAN C\\Desktop\\PI2.6\\PI2\\src\\pages\\ProductorGestor.jsx":"17","C:\\Users\\JULIAN C\\Desktop\\PI2.6\\PI2\\src\\pages\\Productores\\EditarProductores.jsx":"18","C:\\Users\\JULIAN C\\Desktop\\PI2.6\\PI2\\src\\pages\\Gestores\\EditarGestor.jsx":"19","C:\\Users\\JULIAN C\\Desktop\\PI2.6\\PI2\\src\\pages\\TransGestorProductor\\EditarTransaccion.jsx":"20","C:\\Users\\JULIAN C\\Desktop\\PI2.6\\PI2\\src\\components\\Navbar.jsx":"21","C:\\Users\\JULIAN C\\Desktop\\PI2.6\\PI2\\src\\components\\Sidebar.jsx":"22","C:\\Users\\JULIAN C\\Desktop\\PI2.6\\PI2\\src\\pages\\TransGestorGestor\\GestorGestor.jsx":"23","C:\\Users\\JULIAN C\\Desktop\\PI2.6\\PI2\\src\\pages\\TransGestorGestor\\EditarGestorGestor.jsx":"24","C:\\Users\\JULIAN C\\Desktop\\PI2.6\\PI2\\src\\pages\\TransGestorExterno\\EditarGestorEntidadExterna.jsx":"25","C:\\Users\\JULIAN C\\Desktop\\PI2.6\\PI2\\src\\pages\\TransGestorExterno\\RegistrarGestorEntidadExterna.jsx":"26","C:\\Users\\JULIAN C\\Desktop\\PI2.6\\PI2\\src\\pages\\TransGestorGestor\\RegistrarGestorGestor.jsx":"27","C:\\Users\\JULIAN C\\Desktop\\PI2.6\\PI2\\src\\pages\\TransGestorExterno\\GestorEntidadExterna.jsx":"28","C:\\Users\\JULIAN C\\Desktop\\PI2.6\\PI2\\src\\pages\\Graficas\\BarChart.jsx":"29","C:\\Users\\JULIAN C\\Desktop\\PI2.6\\PI2\\src\\pages\\Graficas\\LineChartT.jsx":"30","C:\\Users\\JULIAN C\\Desktop\\PI2.6\\PI2\\src\\pages\\Graficas\\DoughnutChart.jsx":"31","C:\\Users\\JULIAN C\\Desktop\\PI2.6\\PI2\\src\\pages\\Graficas\\LineChartG.jsx":"32","C:\\Users\\JULIAN C\\Desktop\\PI2.6\\PI2\\src\\pages\\Estadisticas.jsx":"33","C:\\Users\\JULIAN C\\Desktop\\PI2.6\\PI2\\src\\components\\StatsLayout.jsx":"34"},{"size":283,"mtime":1700560007765,"results":"35","hashOfConfig":"36"},{"size":6768,"mtime":1700560260496,"results":"37","hashOfConfig":"36"},{"size":375,"mtime":1700192389385,"results":"38","hashOfConfig":"36"},{"size":7013,"mtime":1700557550421,"results":"39","hashOfConfig":"36"},{"size":3936,"mtime":1700192389385,"results":"40","hashOfConfig":"36"},{"size":766,"mtime":1700192389375,"results":"41","hashOfConfig":"36"},{"size":14216,"mtime":1700203879151,"results":"42","hashOfConfig":"36"},{"size":13033,"mtime":1700205892231,"results":"43","hashOfConfig":"36"},{"size":3933,"mtime":1700192389376,"results":"44","hashOfConfig":"36"},{"size":3975,"mtime":1700192389373,"results":"45","hashOfConfig":"36"},{"size":14174,"mtime":1700535264580,"results":"46","hashOfConfig":"36"},{"size":5670,"mtime":1700192389384,"results":"47","hashOfConfig":"36"},{"size":16928,"mtime":1700195954080,"results":"48","hashOfConfig":"36"},{"size":8048,"mtime":1700192389378,"results":"49","hashOfConfig":"36"},{"size":10533,"mtime":1700203900674,"results":"50","hashOfConfig":"36"},{"size":0,"mtime":1700192389371,"results":"51","hashOfConfig":"36"},{"size":3791,"mtime":1700192389375,"results":"52","hashOfConfig":"36"},{"size":7571,"mtime":1700534575052,"results":"53","hashOfConfig":"36"},{"size":10364,"mtime":1700195621292,"results":"54","hashOfConfig":"36"},{"size":0,"mtime":1700192389383,"results":"55","hashOfConfig":"36"},{"size":238,"mtime":1700192389369,"results":"56","hashOfConfig":"36"},{"size":6780,"mtime":1700192389370,"results":"57","hashOfConfig":"36"},{"size":5021,"mtime":1700192389381,"results":"58","hashOfConfig":"36"},{"size":0,"mtime":1700192389381,"results":"59","hashOfConfig":"36"},{"size":6138,"mtime":1700192389379,"results":"60","hashOfConfig":"36"},{"size":14740,"mtime":1700534202129,"results":"61","hashOfConfig":"36"},{"size":15367,"mtime":1700205907938,"results":"62","hashOfConfig":"36"},{"size":4431,"mtime":1700192389380,"results":"63","hashOfConfig":"36"},{"size":1472,"mtime":1700561090085,"results":"64","hashOfConfig":"36"},{"size":4796,"mtime":1700559726012,"results":"65","hashOfConfig":"36"},{"size":2674,"mtime":1700561083129,"results":"66","hashOfConfig":"36"},{"size":4864,"mtime":1700561077079,"results":"67","hashOfConfig":"36"},{"size":911,"mtime":1700560471583,"results":"68","hashOfConfig":"36"},{"size":452,"mtime":1700559609311,"results":"69","hashOfConfig":"36"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1bzpdf5",{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"79"},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"79"},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"127","messages":"128","suppressedMessages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"79"},{"filePath":"131","messages":"132","suppressedMessages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"134","messages":"135","suppressedMessages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"137","messages":"138","suppressedMessages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"140","messages":"141","suppressedMessages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"79"},{"filePath":"144","messages":"145","suppressedMessages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"147","messages":"148","suppressedMessages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"79"},{"filePath":"151","messages":"152","suppressedMessages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"79"},{"filePath":"155","messages":"156","suppressedMessages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"79"},{"filePath":"159","messages":"160","suppressedMessages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"79"},{"filePath":"163","messages":"164","suppressedMessages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"166","messages":"167","suppressedMessages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"169","messages":"170","suppressedMessages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"172","messages":"173","suppressedMessages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"175","messages":"176","suppressedMessages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"178","messages":"179","suppressedMessages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\JULIAN C\\Desktop\\PI2.6\\PI2\\src\\index.js",[],[],"C:\\Users\\JULIAN C\\Desktop\\PI2.6\\PI2\\src\\App.js",[],[],"C:\\Users\\JULIAN C\\Desktop\\PI2.6\\PI2\\src\\reportWebVitals.js",[],[],["181","182"],"C:\\Users\\JULIAN C\\Desktop\\PI2.6\\PI2\\src\\pages\\Inicio.jsx",[],[],"C:\\Users\\JULIAN C\\Desktop\\PI2.6\\PI2\\src\\pages\\Transformadores.jsx",[],[],"C:\\Users\\JULIAN C\\Desktop\\PI2.6\\PI2\\src\\pages\\Logout.jsx",[],[],"C:\\Users\\JULIAN C\\Desktop\\PI2.6\\PI2\\src\\pages\\RegistrarTransformadores.jsx",[],[],"C:\\Users\\JULIAN C\\Desktop\\PI2.6\\PI2\\src\\pages\\TransGestorProductor\\RegistrarTransacciones.jsx",["183","184","185","186","187","188","189","190","191","192"],[],"import React, { useState, useEffect, useCallback } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst RegistrarTransacciones = () => {\r\n  const navigate = useNavigate();\r\n\r\n  const [formData, setFormData] = useState({\r\n    gestor_realiza: '',\r\n    transformador: '',\r\n    material: '',\r\n    cantidad: '',\r\n    fecha: '',\r\n    archivoImagen: null,\r\n    descripcion: '',\r\n    ubicacion: '',\r\n  });\r\n\r\n  const [registros, setRegistros] = useState([]);\r\n  const [trasformadores, setTrasformadores] = useState([]);\r\n  const [gestores, setGestores] = useState([]);\r\n  const [message, setMessage] = useState(null);\r\n  const [materialesString, setMaterialesString] = useState([]);\r\n  const [materiales, setMateriales] = useState([]);\r\n\r\n  const [puntosRecoleccion, setPuntosRecoleccion] = useState([]);\r\n  const [cantidades, setCantidades] = useState(Array.from({ length: materiales.length }, () => ''));\r\n\r\n  const fetchData = useCallback(async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:3000/transacciones');\r\n      if (response.ok) {\r\n        const result = await response.json();\r\n        setRegistros(result);\r\n      } else {\r\n        console.error('Error al cargar datos de la API');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error al realizar la solicitud:', error);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n    fetch('http://localhost:3000/gestor')\r\n      .then((response) => response.json())\r\n      .then((data) => setGestores(data))\r\n      .catch((error) => console.error('Error al obtener la lista de gestores:', error));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n    fetch('http://localhost:3000/transformador')\r\n      .then((response) => response.json())\r\n      .then((data) => setTrasformadores(data)) // Cambiado de setGestores a setTrasformadores\r\n      .catch((error) => console.error('Error al obtener la lista de transformadores:', error));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (formData.gestor_id && formData.transformador_id) {\r\n      const commonMaterials = gestores\r\n        .find((gestor) => gestor.id === formData.gestor_id)?.materiales_recolectados\r\n        .split(',')\r\n        .map((material) => material.trim())\r\n        .filter((material) =>\r\n          gestores.find((gestor) => gestor.id === formData.transformador_id)?.materiales_recolectados\r\n            .split(',')\r\n            .map((m) => m.trim())\r\n            .includes(material)\r\n        );\r\n\r\n      setMateriales(commonMaterials);\r\n      setCantidades(Array.from({ length: commonMaterials.length }, () => ''));\r\n    }\r\n  }, [formData.gestor_id, formData.transformador_id, gestores]);\r\n\r\n  const handleMaterialChange = (e) => {\r\n    const selectedMaterial = e.target.value;\r\n    setFormData((prevFormData) => ({\r\n      ...prevFormData,\r\n      materialId: selectedMaterial,\r\n    }));\r\n\r\n    setMateriales((prevMateriales) => [...prevMateriales, selectedMaterial]);\r\n  };\r\n\r\n  const fetchMaterials = (gestorId) => {\r\n    const parsedId = parseInt(gestorId);\r\n    if (!isNaN(parsedId)) {\r\n      fetch(`http://localhost:3000/gestor/${parsedId}`)\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          if (data && data.materiales_recolectados) {\r\n            const materialList = data.materiales_recolectados.split(',').map((materialId) => materialId.trim());\r\n            setMateriales(materialList);\r\n          }\r\n        })\r\n        .catch((error) => console.error('Error al obtener la lista de materiales:', error));\r\n    } else {\r\n      console.error('El ID seleccionado no es válido:', gestorId);\r\n    }\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n\r\n    setFormData((prevFormData) => ({\r\n      ...prevFormData,\r\n      [name]: value,\r\n    }));\r\n  };\r\n\r\n  const handleCantidadChange = (index, event) => {\r\n    const newValue = event.target.value;\r\n\r\n    setCantidades((prevCantidades) => {\r\n      const updatedCantidades = [...prevCantidades];\r\n      updatedCantidades[index] = newValue;\r\n\r\n      const cantidadesString = updatedCantidades.join(', ');\r\n      setFormData((prevFormData) => ({\r\n        ...prevFormData,\r\n        cantidad: cantidadesString,\r\n      }));\r\n\r\n      return updatedCantidades;\r\n    });\r\n  };\r\n\r\n  const handleGestorRealizaIdChange = async (e) => {\r\n    const selectedId = e.target.value;\r\n    if (selectedId !== '0') {\r\n      const parsedId = parseInt(selectedId);\r\n      if (!isNaN(parsedId)) {\r\n        try {\r\n          const response = await fetch(`http://localhost:3000/gestor/${parsedId}`);\r\n          if (response.ok) {\r\n            const data = await response.json();\r\n            setFormData({\r\n              ...formData,\r\n              gestor_id: data.id,\r\n            });\r\n            fetchMaterials(parsedId);\r\n          } else {\r\n            console.error('Error al obtener los detalles del gestor realiza:', response.status);\r\n          }\r\n        } catch (error) {\r\n          console.error('Error al obtener los detalles del gestor realiza:', error);\r\n        }\r\n      } else {\r\n        console.error('El ID seleccionado no es válido:', selectedId);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleTransformadorRecibeIdChange = async (e) => {\r\n    const selectedId = e.target.value;\r\n    if (selectedId !== '0') {\r\n      const parsedId = parseInt(selectedId);\r\n      if (!isNaN(parsedId)) {\r\n        try {\r\n          const response = await fetch(`http://localhost:3000/transformador/${parsedId}`);\r\n          if (response.ok) {\r\n            const data = await response.json();\r\n            setFormData({\r\n              ...formData,\r\n              transformador_id: data.id,\r\n            });\r\n            fetchDireccionPrincipal(parsedId);\r\n          } else {\r\n            console.error('Error al obtener los detalles del transformador recibe:', response.status);\r\n          }\r\n        } catch (error) {\r\n          console.error('Error al obtener los detalles del transformador recibe:', error);\r\n        }\r\n      } else {\r\n        console.error('El ID seleccionado no es válido:', selectedId);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    console.log(formData);\r\n  \r\n    // Eliminamos la confirmación\r\n    // if (window.confirm('¿Estás seguro de que deseas enviar el formulario?')) {\r\n  \r\n    const numericGestorRecibe = isNaN(formData.gestor_recibe)\r\n      ? formData.gestor_recibe\r\n      : parseFloat(formData.gestor_recibe);\r\n  \r\n    // Eliminamos la condición userConfirmed y el bloque if (userConfirmed)\r\n    try {\r\n      const requestBody = {\r\n        gestor_realiza: formData.gestor_id,\r\n        transformador: formData.transformador_id,\r\n        material: formData.material,\r\n        cantidad: formData.cantidad,\r\n        fecha: formData.fecha,\r\n        archivoImagen: formData.archivoImagen,\r\n        descripcion: formData.descripcion,\r\n        ubicacion: formData.ubicacion,\r\n      };\r\n  \r\n      const requestOptions = {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(requestBody),\r\n      };\r\n  \r\n      const response = await fetch('http://localhost:3000/transacciones', requestOptions);\r\n  \r\n      if (response.ok) {\r\n        console.log('Registro exitoso');\r\n        setMessage('Registro exitoso');\r\n        fetchData();\r\n  \r\n        setFormData({\r\n          gestor_realiza: '',\r\n          gestor_recibe: '',\r\n          material: '',\r\n          cantidad: '',\r\n          fecha: '',\r\n          archivoImagen: null,\r\n          descripcion: '',\r\n          ubicacion: '',\r\n        });\r\n      } else {\r\n        if (response.status === 400) {\r\n          const errorData = await response.json();\r\n          setMessage(`Error al registrar: ${errorData.message}`);\r\n        } else {\r\n          setMessage('Error al registrar. Por favor, intenta de nuevo.');\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Error al realizar la solicitud:', error);\r\n      setMessage('Error de red. Por favor, verifica tu conexión.');\r\n    }\r\n    \r\n  };\r\n\r\n\r\n  const handleCancelar = () => {\r\n    navigate('/gestorGestor');\r\n  };\r\n\r\n  const fetchDireccionPrincipal = (transformadorId) => {\r\n    fetch(`http://localhost:3000/transformador/${transformadorId}`)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        if (data && data.direccion_principal) {\r\n          const direccionPrincipal = data.direccion_principal;\r\n\r\n          console.log('Direccion Principal:', direccionPrincipal);\r\n        } else {\r\n          console.log('No se encontró la dirección principal en la respuesta:', data);\r\n        }\r\n      })\r\n      .catch((error) => console.error('Error al obtener la dirección principal:', error));\r\n  };\r\n\r\n  return (\r\n    <div className=\"registrar-miembros-page\">\r\n      <h2>Formulario de Registro de Gestor - Transformador</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        <div className=\"form-group\">\r\n          <label>Gestor Realiza</label>\r\n          <select\r\n            name=\"gestorRealizaId\"\r\n            value={formData.gestorRealizaId}\r\n            onChange={handleGestorRealizaIdChange}\r\n          >\r\n            <option value=\"\">Selecciona un gestor realiza</option>\r\n            {gestores.map((gestor) => (\r\n              <option key={gestor.id} value={gestor.id}>\r\n                {`${gestor.id} - ${gestor.nombre}`}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n          <label>Transformador Recibe</label>\r\n          <select\r\n            name=\"trasformadorRecibeId\"\r\n            value={formData.trasformadorRecibeId}\r\n            onChange={handleTransformadorRecibeIdChange}\r\n          >\r\n            <option value=\"\">Selecciona un transformador recibe</option>\r\n            {trasformadores.map((transformador) => (\r\n              <option key={transformador.id} value={transformador.id}>\r\n                {`${transformador.id} - ${transformador.representante_legal}`}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n\r\n\r\n        <div className=\"\">\r\n          <div className=\"\">\r\n            <label>Materiales Asociados</label>\r\n            <table>\r\n              <thead>\r\n                <tr>\r\n                  <th>Material</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {materiales.map((materialId, index) => (\r\n                  <tr key={index}>\r\n                    <td>{materialId}</td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n          <div className=\"\">\r\n            <label>Cantidades</label>\r\n            <table>\r\n              <thead>\r\n                <tr>\r\n                  <th>Cantidad</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {Array.from({ length: materiales.length }).map((_, index) => (\r\n                  <tr key={index}>\r\n                    <td>\r\n                      <input\r\n                        type=\"number\"\r\n                        value={cantidades[index]}\r\n                        onChange={(e) => handleCantidadChange(index, e)}\r\n                        placeholder=\"Ingrese un número\"\r\n                      />\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n          <label>Fecha</label>\r\n          <input\r\n            type=\"date\"\r\n            name=\"fecha\"\r\n            value={formData.fecha}\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label>Archivo de Imagen</label>\r\n          <input\r\n            type=\"file\"\r\n            name=\"archivoImagen\"\r\n            accept=\"image/*\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label>Descripción</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"descripcion\"\r\n            value={formData.descripcion}\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n          <label>Direccion principal</label>\r\n          <span>\r\n            {trasformadores.map((transformador) => (\r\n              <span key={transformador.direccion_principal}>\r\n                {transformador.direccion_principal}\r\n              </span>\r\n            ))}\r\n          </span>\r\n        </div>\r\n\r\n        {/*message && <p style={{ color: message.startsWith('Error') ? 'red' : 'green' }}>{message}</p>*/}\r\n\r\n        <div className=\"form-group\">\r\n          <button type=\"submit\" className=\"submit-button\">\r\n            Registrar\r\n          </button>\r\n\r\n          <button type=\"button\" className=\"register-button\" onClick={handleCancelar}>\r\n            Salir\r\n          </button>\r\n        </div>\r\n      </form>\r\n\r\n    </div>\r\n\r\n  );\r\n};\r\n\r\n\r\nexport default RegistrarTransacciones;\r\n","C:\\Users\\JULIAN C\\Desktop\\PI2.6\\PI2\\src\\pages\\Productores\\Productores.jsx",[],[],"C:\\Users\\JULIAN C\\Desktop\\PI2.6\\PI2\\src\\pages\\Gestores\\Gestores.jsx",[],[],"C:\\Users\\JULIAN C\\Desktop\\PI2.6\\PI2\\src\\pages\\Productores\\RegistrarProductores.jsx",[],[],"C:\\Users\\JULIAN C\\Desktop\\PI2.6\\PI2\\src\\pages\\TransGestorProductor\\Transacciones.jsx",["193"],[],"import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport '../../styles/custom-table.css';\r\n\r\nconst Transactions = () => {\r\n  const [data, setData] = useState([]);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [searchNit, setSearchNit] = useState('');\r\n  const itemsPerPage = 10;\r\n  const totalPages = Math.ceil(data.length / itemsPerPage);\r\n  const [filteredData, setFilteredData] = useState([]);\r\n  const [error, setError] = useState(null);\r\n  const [gestoresData, setGestoresData] = useState([]);\r\n\r\n  const [transformadoresData, setTransformadoresData] = useState([]); // Nueva variable de estado\r\n\r\n  useEffect(() => {\r\n    const fetchDataAndGestores = async () => {\r\n      try {\r\n        const [transaccionesResponse, gestoresResponse, transformadoresResponse] = await Promise.all([\r\n          fetch('http://localhost:3000/transacciongt'),\r\n          fetch('http://localhost:3000/gestor'),\r\n          fetch('http://localhost:3000/transformador')\r\n        ]);\r\n\r\n        if (transaccionesResponse.ok && gestoresResponse.ok && transformadoresResponse.ok) {\r\n          const transaccionesResult = await transaccionesResponse.json();\r\n          const gestoresResult = await gestoresResponse.json();\r\n          const transformadoresResult = await transformadoresResponse.json();\r\n\r\n          console.log('Transacciones Data:', transaccionesResult);\r\n          console.log('Gestores Data:', gestoresResult);\r\n          console.log('Transformadores Data:', transformadoresResult);\r\n\r\n          setData(transaccionesResult);\r\n          setFilteredData(transaccionesResult);\r\n          setGestoresData(gestoresResult);\r\n          setTransformadoresData(transformadoresResult); \r\n        } else {\r\n          console.error('Error al cargar datos de la API');\r\n          setError('Error al cargar datos de la API');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error al realizar la solicitud:', error);\r\n        setError('Error al realizar la solicitud');\r\n      }\r\n    };\r\n\r\n    fetchDataAndGestores();\r\n  }, []);\r\n\r\n  const handleSearchChange = (e) => {\r\n    const searchTerm = e.target.value;\r\n    setSearchNit(searchTerm);\r\n\r\n    const filtered = data.filter((item) =>\r\n      item.nit.includes(searchTerm)\r\n    );\r\n\r\n    setFilteredData(filtered);\r\n  };\r\n\r\n  const handlePageChange = (newPage) => {\r\n    setCurrentPage(newPage);\r\n  };\r\n\r\n  const paginatedData = filteredData.slice(\r\n    (currentPage - 1) * itemsPerPage,\r\n    currentPage * itemsPerPage\r\n  );\r\n\r\n  const getTransformadorNameById = (transformadorId) => {\r\n    const transformador = transformadoresData.find((t) => t.id === transformadorId);\r\n    return transformador ? transformador.razon_social : 'Nombre no encontrado';\r\n  };\r\n\r\n  const deleteTransaction = async (id) => {\r\n    try {\r\n      const response = await fetch(`http://localhost:3000/transacciongt/${id}`, {\r\n        method: 'DELETE',\r\n      });\r\n      if (response.ok) {\r\n        // Remove the deleted item from the data array\r\n        const updatedData = data.filter((item) => item.id !== id);\r\n        setData(updatedData);\r\n        setFilteredData(updatedData);\r\n      } else {\r\n        console.error('Error al eliminar la transacción');\r\n        setError('Error al eliminar la transacción');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error al realizar la solicitud:', error);\r\n      setError('Error al realizar la solicitud');\r\n    }\r\n  };\r\n\r\n  \r\n\r\n\r\n  return (\r\n    <div className=\"about-page\">\r\n      <h1 className=\"page-title\">Gestor Transformador</h1>\r\n\r\n      {error && (\r\n        <div className=\"error-message\">\r\n          Error: {error}\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"search-bar\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Buscar por ID\"\r\n          value={searchNit}\r\n          onChange={handleSearchChange}\r\n          className=\"search-input\"\r\n        />\r\n      </div>\r\n\r\n      <table className=\"custom-table\">\r\n        <thead>\r\n          <tr>\r\n            <th>Gestor</th>\r\n            <th>Transformador</th>\r\n            <th>Material</th>\r\n            <th>Fecha</th>\r\n            <th>Descripción</th>\r\n            <th>Acciones</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {paginatedData.map((item) => (\r\n            <tr key={item.id}>\r\n              <td>{item.gestor ? item.gestor.nombre : 'Nombre no encontrado'}</td>\r\n              <td>{item.transformador ? getTransformadorNameById(item.transformador.id) : 'Nombre no encontrado'}</td>\r\n\r\n\r\n\r\n              <td>{item.material}</td>\r\n              <td>{item.fecha}</td>\r\n              <td>{item.descripcion}</td>\r\n              <td>\r\n                <button onClick={() => deleteTransaction(item.id)}>Eliminar</button>\r\n                <Link to={`/editarTransaccion/${item.id}`}>\r\n                  <button>Editar</button>\r\n                </Link>\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n\r\n      <div className=\"pagination\">\r\n        <button\r\n          onClick={() => handlePageChange(currentPage - 1)}\r\n          disabled={currentPage === 1}\r\n        >\r\n          Anterior\r\n        </button>\r\n        <span>Página {currentPage} de {totalPages}</span>\r\n        <button\r\n          onClick={() => handlePageChange(currentPage + 1)}\r\n          disabled={currentPage === totalPages}\r\n        >\r\n          Siguiente\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"action-buttons\">\r\n        <Link to=\"/registrarTransacciones\" className=\"register-button\">\r\n          Registrar\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Transactions;\r\n\r\n\r\n\r\n\r\n","C:\\Users\\JULIAN C\\Desktop\\PI2.6\\PI2\\src\\pages\\Gestores\\RegistrarGestores.jsx",[],[],"C:\\Users\\JULIAN C\\Desktop\\PI2.6\\PI2\\src\\pages\\RegistrarProductorGestor.jsx",[],[],"C:\\Users\\JULIAN C\\Desktop\\PI2.6\\PI2\\src\\pages\\EditarTransformador.jsx",[],[],"C:\\Users\\JULIAN C\\Desktop\\PI2.6\\PI2\\src\\pages\\EditarProductorGestor.jsx",[],[],"C:\\Users\\JULIAN C\\Desktop\\PI2.6\\PI2\\src\\pages\\ProductorGestor.jsx",[],[],"C:\\Users\\JULIAN C\\Desktop\\PI2.6\\PI2\\src\\pages\\Productores\\EditarProductores.jsx",[],[],"C:\\Users\\JULIAN C\\Desktop\\PI2.6\\PI2\\src\\pages\\Gestores\\EditarGestor.jsx",["194","195"],[],"import React, { useState, useEffect } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\n\r\nconst EditarGestor = () => {\r\n  const { id } = useParams();\r\n  const navigate = useNavigate();\r\n\r\n  const [formData, setFormData] = useState({\r\n    nombre: '',\r\n    capacidad: 0,\r\n    nit: 0,\r\n    telefono: 0,\r\n    direccion: '',\r\n    estado: true,\r\n    categoria_municipio: '',\r\n    municipio: '',\r\n    correo: '',\r\n    toneladas_recolectadas: '',\r\n    puntos_recoleccion: '',\r\n    mecanismos_recoleccion: '',\r\n    materiales_recolectados: '',\r\n  });\r\n\r\n  useEffect(() => {\r\n    const fetchGestorDetails = async () => {\r\n      try {\r\n        const response = await fetch(`http://localhost:3000/gestor/${id}`);\r\n        if (response.ok) {\r\n          const data = await response.json();\r\n          setFormData(data);\r\n        } else {\r\n          console.error('Error al cargar los detalles del gestor');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error al realizar la solicitud:', error);\r\n      }\r\n    };\r\n    fetchGestorDetails();\r\n  }, [id]);\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value, type, checked } = e.target;\r\n    setFormData({\r\n      ...formData,\r\n      [name]: type === 'checkbox' ? checked : value,\r\n    });\r\n  };\r\n\r\n  // Función para manejar el cambio en los puntos de recolección\r\n  const handlePuntosRecoleccionChange = (e) => {\r\n    const { value } = e.target;\r\n    setFormData({\r\n      ...formData,\r\n      puntos_recoleccion: value,\r\n    });\r\n  };\r\n\r\n  // Función para manejar el cambio en los materiales recolectados\r\n  const handleMaterialesRecolectadosChange = (e) => {\r\n    const { value } = e.target;\r\n    setFormData({\r\n      ...formData,\r\n      materiales_recolectados: value,\r\n    });\r\n  };\r\n\r\n  // Funciones para manejar los puntos de recolección\r\n  const handleEliminarPuntoRecoleccion = (index) => {\r\n    const nuevosPuntosRecoleccion = formData.puntos_recoleccion.split(', ');\r\n    nuevosPuntosRecoleccion.splice(index, 1);\r\n    const nuevosPuntosRecoleccionString = nuevosPuntosRecoleccion.join(', ');\r\n    setFormData({\r\n      ...formData,\r\n      puntos_recoleccion: nuevosPuntosRecoleccionString,\r\n    });\r\n  };\r\n\r\n  const handleAgregarPuntoRecoleccion = () => {\r\n    const nuevosPuntosRecoleccion = formData.puntos_recoleccion.split(', ');\r\n    nuevosPuntosRecoleccion.push('');\r\n    const nuevosPuntosRecoleccionString = nuevosPuntosRecoleccion.join(', ');\r\n    setFormData({\r\n      ...formData,\r\n      puntos_recoleccion: nuevosPuntosRecoleccionString,\r\n    });\r\n  };\r\n\r\n  \r\n  const materiales = [\r\n    'Papel',\r\n    'Cartón',\r\n    'Vidrio',\r\n    'Plástico Rígido',\r\n    'Plástico Flexible',\r\n  ];\r\n\r\n  // Función para manejar el cambio en los materiales recolectados\r\n  const handleMaterialChange = (e) => {\r\n    const { name, checked } = e.target;\r\n    let materialesSeleccionados = formData.materiales_recolectados.split(', ');\r\n    if (checked) {\r\n      materialesSeleccionados.push(name);\r\n    } else {\r\n      materialesSeleccionados = materialesSeleccionados.filter((material) => material !== name);\r\n    }\r\n    const materialesSeleccionadosString = materialesSeleccionados.join(', ');\r\n    setFormData({\r\n      ...formData,\r\n      materiales_recolectados: materialesSeleccionadosString,\r\n    });\r\n  };\r\n\r\n  const handleGuardarCambios = () => {\r\n    navigate('/gestores');\r\n    const actualizarGestor = async () => {\r\n      try {\r\n        const response = await fetch(`http://localhost:3000/gestor/${id}`, {\r\n          method: 'PUT',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify(formData),\r\n        });\r\n        if (response.ok) {\r\n          navigate('/gestores');\r\n        } else {\r\n          const responseData = await response.json();\r\n          console.error('Error al actualizar el gestor:', responseData.error);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error al realizar la solicitud:', error);\r\n      }\r\n    };\r\n\r\n    actualizarGestor();\r\n  };\r\n\r\n  const handleCancelar = () => {\r\n    navigate('/gestores');\r\n  };\r\n\r\n  return (\r\n    <div className=\"registrar-miembros-page\">\r\n      <h2>Formulario de Edición de Gestores</h2>\r\n      <form onSubmit={handleGuardarCambios}>\r\n        <div className=\"form-group\">\r\n          <label>Nombre</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"nombre\"\r\n            value={formData.nombre}\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n          <label>Correo</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"correo\"\r\n            value={formData.correo}\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n          <label>NIT</label>\r\n          <input\r\n            type=\"number\"\r\n            name=\"nit\"\r\n            value={formData.nit}\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n          <label>Teléfono</label>\r\n          <input\r\n            type=\"number\"\r\n            name=\"telefono\"\r\n            value={formData.telefono}\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n          <label>Dirección</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"direccion\"\r\n            value={formData.direccion}\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n          <label>Capacidad</label>\r\n          <input\r\n            type=\"number\"\r\n            name=\"capacidad\"\r\n            value={formData.capacidad}\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n          <label>Estado</label>\r\n          <select\r\n            name=\"estado\"\r\n            value={formData.estado ? \"activo\" : \"inactivo\"}\r\n            onChange={(e) => setFormData({ ...formData, estado: e.target.value === \"activo\" })}\r\n          >\r\n            <option value=\"activo\">Activo</option>\r\n            <option value=\"inactivo\">Inactivo</option>\r\n          </select>\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n          <label>Municipio</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"municipio\"\r\n            value={formData.municipio}\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n          <label>Categoría Municipio</label>\r\n          <select\r\n            name=\"categoria_municipio\"\r\n            value={formData.categoria_municipio}\r\n            onChange={handleChange}\r\n          >\r\n            <option value=\"1\">Categoría 1</option>\r\n            <option value=\"2\">Categoría 2</option>\r\n            <option value=\"3\">Categoría 3</option>\r\n            <option value=\"4\">Categoría 4</option>\r\n            <option value=\"5\">Categoría 5</option>\r\n            <option value=\"6\">Categoría 6</option>\r\n          </select>\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n          <label>Puntos de Recolección</label>\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <th>Punto</th>\r\n                <th>Eliminar</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {formData.puntos_recoleccion.split(', ').map((punto, index) => (\r\n                <tr key={index}>\r\n                  <td>\r\n                    <input\r\n                      type=\"text\"\r\n                      name=\"puntos_recoleccion\"\r\n                      value={punto}\r\n                      onChange={(e) => {\r\n                        const nuevosPuntosRecoleccion = formData.puntos_recoleccion.split(', ');\r\n                        nuevosPuntosRecoleccion[index] = e.target.value;\r\n                        const nuevosPuntosRecoleccionString = nuevosPuntosRecoleccion.join(', ');\r\n                        setFormData({\r\n                          ...formData,\r\n                          puntos_recoleccion: nuevosPuntosRecoleccionString,\r\n                        });\r\n                      }}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    {formData.puntos_recoleccion.split(', ').length > 1 && (\r\n                      <button\r\n                        type=\"button\"\r\n                        className=\"eliminar-button\"\r\n                        onClick={() => handleEliminarPuntoRecoleccion(index)}\r\n                      >\r\n                        Eliminar\r\n                      </button>\r\n                    )}\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n          <button type=\"button\" onClick={handleAgregarPuntoRecoleccion}>\r\n            Agregar Punto\r\n          </button>\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n          <label>Mecanismos de Recolección</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"mecanismos_recoleccion\"\r\n            value={formData.mecanismos_recoleccion}\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n          <label>Materiales Recolectados</label>\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <th>Material</th>\r\n                <th>Seleccionar</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {materiales.map((material) => (\r\n                <tr key={material}>\r\n                  <td>{material}</td>\r\n                  <td>\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      name={material}\r\n                      checked={formData.materiales_recolectados.includes(material)}\r\n                      onChange={handleMaterialChange}\r\n                    />\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n          <button type=\"submit\" className=\"submit-button\">\r\n            Guardar Cambios\r\n          </button>\r\n          <button type=\"button\" className=\"register-button\" onClick={handleCancelar}>\r\n            Salir\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EditarGestor;\r\n\r\n","C:\\Users\\JULIAN C\\Desktop\\PI2.6\\PI2\\src\\pages\\TransGestorProductor\\EditarTransaccion.jsx",[],[],"C:\\Users\\JULIAN C\\Desktop\\PI2.6\\PI2\\src\\components\\Navbar.jsx",[],[],"C:\\Users\\JULIAN C\\Desktop\\PI2.6\\PI2\\src\\components\\Sidebar.jsx",[],[],"C:\\Users\\JULIAN C\\Desktop\\PI2.6\\PI2\\src\\pages\\TransGestorGestor\\GestorGestor.jsx",["196","197","198"],[],"import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport '../../styles/custom-table.css';\r\n\r\nconst GestorGestor = () => {\r\n  const [data, setData] = useState([]);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [searchId, setSearchId] = useState('');\r\n  const itemsPerPage = 10;\r\n  const totalPages = Math.ceil(data.length / itemsPerPage);\r\n  const [filteredData, setFilteredData] = useState([]);\r\n  const [gestoresData, setGestoresData] = useState([]);\r\n\r\n  const fetchGestoresData = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:3000/gestor');\r\n      if (response.ok) {\r\n        const result = await response.json();\r\n        console.log('Gestores Data:', result); // Agrega este console log\r\n        setGestoresData(result);\r\n      } else {\r\n        console.error('Error al cargar datos de la API de gestores');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error al realizar la solicitud de gestores:', error);\r\n    }\r\n  };\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:3000/transacciongg');\r\n      if (response.ok) {\r\n        const result = await response.json();\r\n        setData(result);\r\n      } else {\r\n        console.error('Error al cargar datos de la API de transaccionesgg');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error al realizar la solicitud de transaccionesgg:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchDataAndGestores = async () => {\r\n      try {\r\n        const [transaccionesResponse, gestoresResponse] = await Promise.all([\r\n          fetch('http://localhost:3000/transacciongg'),\r\n          fetch('http://localhost:3000/gestor')\r\n        ]);\r\n\r\n        if (transaccionesResponse.ok && gestoresResponse.ok) {\r\n          const transaccionesResult = await transaccionesResponse.json();\r\n          const gestoresResult = await gestoresResponse.json();\r\n\r\n          setData(transaccionesResult);\r\n          setGestoresData(gestoresResult);\r\n\r\n          console.log('Transacciones Data:', transaccionesResult);\r\n          console.log('Gestores Data:', gestoresResult);\r\n        } else {\r\n          console.error('Error al cargar datos de la API');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error al realizar la solicitud:', error);\r\n      }\r\n    };\r\n\r\n    fetchDataAndGestores();\r\n  }, []);\r\n\r\n  const handlePageChange = (newPage) => {\r\n    setCurrentPage(newPage);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const filtered = data.filter((item) =>\r\n      item.id.toString().includes(searchId)\r\n    );\r\n\r\n    setFilteredData(filtered);\r\n  }, [searchId, data]);\r\n\r\n  const paginatedData = filteredData.slice(\r\n    (currentPage - 1) * itemsPerPage,\r\n    currentPage * itemsPerPage\r\n  );\r\n\r\n  const getGestorNameById = (gestor) => {\r\n    return gestor ? gestor.nombre : 'Nombre no encontrado';\r\n  };\r\n\r\n  return (\r\n    <div className=\"about-page\">\r\n      <h1 className=\"page-title\">Gestor Gestor</h1>\r\n      <div className=\"search-bar\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Buscar por ID\"\r\n          value={searchId}\r\n          onChange={(e) => setSearchId(e.target.value)}\r\n          className=\"search-input\"\r\n        />\r\n      </div>\r\n      <table className=\"custom-table\">\r\n        <thead>\r\n          <tr>\r\n            <th>Gestor Realiza</th>\r\n            <th>Gestor Recibe</th>\r\n            <th>Material</th>\r\n            <th>Cantidad</th>\r\n            <th>Fecha</th>\r\n            <th>Descripción</th>\r\n            <th>Ubicación</th>\r\n            <th>Acciones</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {paginatedData.map((item) => (\r\n            <tr key={item.id}>\r\n              <td>{getGestorNameById(item.gestor_realiza)}</td>\r\n              <td>{getGestorNameById(item.gestor_recibe)}</td>\r\n              <td>{item.materialId}</td>\r\n              <td>{item.cantidad}</td>\r\n              <td>{item.fecha}</td>\r\n              <td>{item.descripcion}</td>\r\n              <td>{item.ubicacion}</td>\r\n              <td>\r\n                <Link to={`/editarGestorGestor/${item.id}`}>\r\n                  <button>Editar</button>\r\n                </Link>\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n\r\n      <div className=\"pagination\">\r\n        <button\r\n          onClick={() => handlePageChange(currentPage - 1)}\r\n          disabled={currentPage === 1}\r\n        >\r\n          Anterior\r\n        </button>\r\n        <span>Página {currentPage} de {totalPages}</span>\r\n        <button\r\n          onClick={() => handlePageChange(currentPage + 1)}\r\n          disabled={currentPage === totalPages}\r\n        >\r\n          Siguiente\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"action-buttons\">\r\n        <Link to=\"/registrarGestorGestor\" className=\"register-button\">\r\n          Registrar Transacción Gestor Gestor\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GestorGestor;\r\n\r\n\r\n\r\n\r\n","C:\\Users\\JULIAN C\\Desktop\\PI2.6\\PI2\\src\\pages\\TransGestorGestor\\EditarGestorGestor.jsx",[],[],"C:\\Users\\JULIAN C\\Desktop\\PI2.6\\PI2\\src\\pages\\TransGestorExterno\\EditarGestorEntidadExterna.jsx",["199"],[],"import React, { useState, useEffect } from 'react';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\n\r\nconst EditarGestorEntidadExterna = () => {\r\n  const { id } = useParams();\r\n  const navigate = useNavigate();\r\n  const [formData, setFormData] = useState({\r\n    gestor_id: 0,\r\n    material: '',\r\n    cantidad: 0,\r\n    fecha: '',\r\n    archivoImagen: null,\r\n    entidad_externa: '',\r\n    descripcion: '',\r\n    ubicacion: '',\r\n  });\r\n  const [gestorIds, setGestorIds] = useState([]);\r\n  const [materiales, setMateriales] = useState([]);\r\n  const [cantidades, setCantidades] = useState([]);\r\n\r\n\r\n  useEffect(() => {\r\n    fetch('http://localhost:3000/materiales')\r\n      .then((response) => response.json())\r\n      .then((data) => setMateriales(data))\r\n      .catch((error) => console.error('Error al obtener la lista de materiales:', error));\r\n  }, [id]);\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value, type, files } = e.target;\r\n    if (type === 'file') {\r\n      setFormData({\r\n        ...formData,\r\n        [name]: files[0],\r\n      });\r\n    } else {\r\n      setFormData({\r\n        ...formData,\r\n        [name]: value,\r\n      });\r\n    }\r\n  };\r\n\r\n  const guardarEdicion = async () => {\r\n\r\n\r\n    const form = new FormData();\r\n    for (const key in formData) {\r\n      if (key === 'archivoImagen') {\r\n        form.append(key, formData[key], formData[key].name);\r\n      } else {\r\n        form.append(key, formData[key]);\r\n      }\r\n    }\r\n\r\n    const requestOptions = {\r\n      method: 'PUT',\r\n      body: form,\r\n    };\r\n\r\n    try {\r\n      const response = await fetch(`http://localhost:3000/transaccionge/${id}`, requestOptions);\r\n\r\n      if (response.ok) {\r\n        console.log('Edición exitosa');\r\n        navigate('/gestorEntidadExterna');\r\n      } else {\r\n        console.error('Error al editar el registro');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error al realizar la solicitud:', error);\r\n    }\r\n  };\r\n\r\n  const handleCancelar = () => {\r\n    navigate('/gestorEntidadExterna');\r\n  };\r\n\r\n  const handleCantidadChange = (index, event) => {\r\n    const newValue = event.target.value;\r\n\r\n    setCantidades((prevCantidades) => {\r\n      const updatedCantidades = [...prevCantidades];\r\n      updatedCantidades[index] = newValue;\r\n\r\n      // Actualizar directamente el campo 'cantidad' en el estado formData\r\n      const cantidadesString = updatedCantidades.join(', ');\r\n      setFormData((prevFormData) => ({\r\n        ...prevFormData,\r\n        cantidad: cantidadesString,\r\n      }));\r\n\r\n      return updatedCantidades;\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"editar-registro-page\">\r\n      <h2>Editar Registro de Transacción - Entidad Externa</h2>\r\n      <form>\r\n        <div className=\"form-group\">\r\n          <label>Gestor ID</label>\r\n          <select name=\"gestor_id\" value={formData.gestor_id} onChange={handleChange}>\r\n            <option value={0}>Selecciona un gestor</option>\r\n            {gestorIds.map((gestorId) => (\r\n              <option key={gestorId} value={gestorId}>\r\n                {gestorId}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n\r\n\r\n        <div className=\"\">\r\n          <div className=\"\">\r\n            <label>Materiales Asociados</label>\r\n            <table>\r\n              <thead>\r\n                <tr>\r\n                  <th>Material</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {materiales.map((material, index) => (\r\n                  <tr key={index}>\r\n                    <td>{material}</td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n          <div className=\"\">\r\n            <label>Cantidades</label>\r\n            <table>\r\n              <thead>\r\n                <tr>\r\n                  <th>Cantidad</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {cantidades.map((cantidad, index) => (\r\n                  <tr key={index}>\r\n                    <td>\r\n                      <input\r\n                        type=\"number\"\r\n                        value={cantidad}\r\n                        onChange={(e) => handleCantidadChange(index, e)}\r\n                        placeholder=\"Ingrese un número\"\r\n                      />\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n\r\n\r\n\r\n        <div className=\"form-group\">\r\n          <label>Fecha</label>\r\n          <input\r\n            type=\"date\"\r\n            name=\"fecha\"\r\n            value={formData.fecha}\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label>Archivo de Imagen</label>\r\n          <input\r\n            type=\"file\"\r\n            name=\"archivoImagen\"\r\n            accept=\"image/*\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label>Entidad Externa</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"entidad_externa\"\r\n            value={formData.entidad_externa}\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label>Descripción</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"descripcion\"\r\n            value={formData.descripcion}\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label>Ubicación</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"ubicacion\"\r\n            value={formData.ubicacion}\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <button type=\"button\" className=\"submit-button\" onClick={guardarEdicion}>\r\n            Guardar Edición\r\n          </button>\r\n          <button type=\"button\" className=\"register-button\" onClick={handleCancelar}>\r\n            Cancelar\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EditarGestorEntidadExterna;\r\n","C:\\Users\\JULIAN C\\Desktop\\PI2.6\\PI2\\src\\pages\\TransGestorExterno\\RegistrarGestorEntidadExterna.jsx",["200","201","202","203","204","205"],[],"\r\nimport React, { useState, useEffect, useCallback } from 'react';\r\nimport '../../styles/registrarTransacciones.css';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst RegistrarGestorEntidadExterna = () => {\r\n  const [formData, setFormData] = useState({\r\n    gestorId: '',\r\n    gestor_recibe: '',\r\n    material: '',\r\n    cantidad: '',\r\n    fecha: '',\r\n    archivoImagen: null,\r\n    entidad_externa: '',\r\n    descripcion: '',\r\n    ubicacion: '',\r\n  });\r\n\r\n  const [registros, setRegistros] = useState([]);\r\n  const [editandoId, setEditandoId] = useState(null);\r\n  const [message, setMessage] = useState(null);\r\n  const [gestorNombres, setGestorNombres] = useState([]); // Agregar estado para nombres\r\n  const [materiales, setMateriales] = useState([]);\r\n  const [gestores, setGestores] = useState([]);\r\n  const navigate = useNavigate();\r\n  const [puntosRecoleccion, setPuntosRecoleccion] = useState([]);\r\n  const [cantidades, setCantidades] = useState(Array.from({ length: materiales.length }, () => ''));\r\n\r\n  const fetchData = useCallback(async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:3000/transaccionge');\r\n      if (response.ok) {\r\n        const result = await response.json();\r\n        setRegistros(result);\r\n      } else {\r\n        console.error('Error al cargar datos de la API');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error al realizar la solicitud:', error);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n    fetch('http://localhost:3000/gestor')\r\n      .then((response) => response.json())\r\n      .then((data) => setGestores(data))\r\n      .catch((error) => console.error('Error al obtener la lista de gestores:', error));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (formData.gestorId) {\r\n      fetchMaterials(formData.gestorId);\r\n      fetchPuntosRecoleccion(formData.gestorId);\r\n    }\r\n  }, [formData.gestorId]);\r\n\r\n  const fetchMaterials = (gestorId) => {\r\n    const parsedId = parseInt(gestorId);\r\n    if (!isNaN(parsedId)) {\r\n      fetch(`http://localhost:3000/gestor/${parsedId}`)\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          if (data && data.materiales_recolectados) {\r\n            const materialList = data.materiales_recolectados.split(',').map(material => material.trim());\r\n\r\n            // Actualizar el estado 'materiales'\r\n            setMateriales(materialList);\r\n\r\n            // Actualizar el estado 'material' con la cadena de materiales separados por \", \"\r\n            setFormData({\r\n              ...formData,\r\n              material: materialList.join(', '),\r\n            });\r\n          }\r\n        })\r\n        .catch((error) => console.error('Error al obtener la lista de materiales:', error));\r\n    } else {\r\n      console.error('El ID seleccionado no es válido:', gestorId);\r\n    }\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n\r\n    setFormData((prevFormData) => ({\r\n      ...prevFormData,\r\n      [name]: value,\r\n    }));\r\n  };\r\n\r\n  const handleCantidadChange = (index, event) => {\r\n    const newValue = event.target.value;\r\n\r\n    setCantidades((prevCantidades) => {\r\n      const updatedCantidades = [...prevCantidades];\r\n      updatedCantidades[index] = newValue;\r\n\r\n      // Actualizar directamente el campo 'cantidad' en el estado formData\r\n      const cantidadesString = updatedCantidades.join(', ');\r\n      setFormData((prevFormData) => ({\r\n        ...prevFormData,\r\n        cantidad: cantidadesString,\r\n      }));\r\n\r\n      return updatedCantidades;\r\n    });\r\n  };\r\n\r\n\r\n  const handleGestorIdChange = (e) => {\r\n    const selectedId = e.target.value;\r\n    if (selectedId !== \"0\") {\r\n      // Asegurarse de que selectedId sea un número válido\r\n      const parsedId = parseInt(selectedId);\r\n      if (!isNaN(parsedId)) {\r\n        // Hacer la solicitud para obtener los detalles del gestor por su ID\r\n        fetch(`http://localhost:3000/gestor/${parsedId}`)\r\n          .then((response) => response.json())\r\n          .then((data) => {\r\n            console.log(data); // Agregar un log para verificar los datos\r\n            // Actualizar el estado con el nombre del gestor seleccionado\r\n            setFormData({\r\n              ...formData,\r\n              gestor_recibe: data.nombre,\r\n            });\r\n          })\r\n          .catch((error) => console.error('Error al obtener los detalles del gestor:', error));\r\n      } else {\r\n        console.error('El ID seleccionado no es válido:', selectedId);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    console.log(formData);\r\n    console.log(materiales);\r\n    console.log(cantidades);\r\n    const numericGestorRecibe = isNaN(formData.gestor_recibe) ? formData.gestor_recibe : parseFloat(formData.gestor_recibe);\r\n    \r\n    const userConfirmed = window.confirm(\"¿Estás seguro de que deseas enviar el formulario?\");\r\n    \r\n    if (userConfirmed) {\r\n      try {\r\n        const requestBody = {\r\n          gestor_recibe: formData.gestorId, // Cambié gestorId a gestor_recibe\r\n          gestorId: '', // Puedes mantener este valor en blanco si es necesario\r\n          material: materiales.join(', '),\r\n          cantidad: cantidades.join(', '),\r\n          fecha: formData.fecha,\r\n          archivoImagen: formData.archivoImagen,\r\n          entidad_externa: formData.entidad_externa,\r\n          descripcion: formData.descripcion,\r\n          ubicacion: formData.ubicacion,\r\n        };\r\n  \r\n        const requestOptions = {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify(requestBody),\r\n        };\r\n  \r\n        const response = await fetch('http://localhost:3000/transacciones', requestOptions);\r\n  \r\n        if (response.ok) {\r\n          console.log('Registro exitoso');\r\n          console.log(\"gestor_recibe: \", numericGestorRecibe);\r\n          fetchData();\r\n  \r\n          // Restablecer el estado del formulario\r\n          setFormData({\r\n            gestorId: '',\r\n            gestor_recibe: '',\r\n            material: '',\r\n            cantidad: '',\r\n            fecha: '',\r\n            archivoImagen: null,\r\n            entidad_externa: '',\r\n            descripcion: '',\r\n            ubicacion: '',\r\n          });\r\n        } else {\r\n          if (response.status === 400) {\r\n            const errorData = await response.json();\r\n            setMessage(`Error al registrar: ${errorData.message}`);\r\n          } else {\r\n            setMessage('Error al registrar. Por favor, intenta de nuevo.');\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Error al realizar la solicitud:', error);\r\n        setMessage('Error de red. Por favor, verifica tu conexión.');\r\n      }\r\n    } else {\r\n      console.log('Envío del formulario cancelado');\r\n    }\r\n  };\r\n  \r\n  \r\n\r\n  const editarRegistro = (id) => {\r\n    setEditandoId(id);\r\n    // Aquí puedes cargar los datos del registro seleccionado para edición si es necesario.\r\n    // Por ejemplo, puedes realizar una solicitud a la API para obtener los detalles del registro.\r\n    fetch(`http://localhost:3000/transaccionge/${id}`)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        // Verifica la estructura de datos y ajusta la lógica según sea necesario\r\n        const {\r\n          gestorId,\r\n          gestor_recibe,\r\n          material,\r\n          cantidad,\r\n          fecha,\r\n          archivoImagen,\r\n          entidad_externa,\r\n          descripcion,\r\n          ubicacion,\r\n        } = data;\r\n  \r\n        // Actualiza el estado formData con los datos del registro seleccionado\r\n        setFormData({\r\n          gestorId,\r\n          gestor_recibe,\r\n          material,\r\n          cantidad,\r\n          fecha,\r\n          archivoImagen,\r\n          entidad_externa,\r\n          descripcion,\r\n          ubicacion,\r\n        });\r\n      })\r\n      .catch((error) => console.error('Error al cargar los datos del registro:', error));\r\n  };\r\n\r\n  const guardarEdicion = async () => {\r\n    navigate('/gestorEntidadExterna');\r\n    const requestOptions = {\r\n      method: 'PUT',\r\n      body: JSON.stringify(formData),\r\n      headers: { 'Content-Type': 'application/json' },\r\n    };\r\n\r\n    try {\r\n      const response = await fetch(`http://localhost:3000/http://localhost:3000/transaccionge/${editandoId}`, requestOptions);\r\n\r\n      if (response.ok) {\r\n        console.log('Edición exitosa');\r\n        fetchData();\r\n        setEditandoId(null);\r\n      } else {\r\n        console.error('Error al editar el registro');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error al realizar la solicitud:', error);\r\n    }\r\n  };\r\n\r\n  const eliminarRegistro = async (id) => {\r\n    try {\r\n      const response = await fetch(`http://localhost:3000/http://localhost:3000/transaccionge/${id}`, {\r\n        method: 'DELETE',\r\n      });\r\n\r\n      if (response.ok) {\r\n        console.log('Eliminación exitosa');\r\n        fetchData();\r\n      } else {\r\n        console.error('Error al eliminar el registro');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error al realizar la solicitud:', error);\r\n    }\r\n  };\r\n\r\n  const handleCancelar = () => {\r\n    navigate('/gestorEntidadExterna');\r\n  };\r\n\r\n  const fetchPuntosRecoleccion = (gestorId) => {\r\n    fetch(`http://localhost:3000/gestor/${gestorId}`)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        if (data && data.puntos_recoleccion) {\r\n          const puntosRecoleccionList = data.puntos_recoleccion.split(',').map(punto => punto.trim());\r\n          setPuntosRecoleccion(puntosRecoleccionList);\r\n        } else {\r\n          console.log('No se encontraron datos de puntos de recolección en la respuesta:', data);\r\n        }\r\n      })\r\n      .catch((error) => console.error('Error al obtener la lista de puntos de recolección:', error));\r\n  };\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"registrar-miembros-page\">\r\n      <h2>Formulario de Registro de Transacción - Entidad Externa</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        <div className=\"form-group\">\r\n          <label>ID - Nombre del gestor</label>\r\n          <select\r\n            name=\"gestorId\"\r\n            value={formData.gestorId}\r\n            onChange={handleChange}\r\n          >\r\n            <option value=\"\">Selecciona un gestor</option>\r\n            {gestores.map((gestor) => (\r\n              <option key={gestor.id} value={gestor.id}>\r\n                {`${gestor.id} - ${gestor.nombre}`}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n\r\n        <div className=\"\">\r\n          <div className=\"\">\r\n            <label>Materiales Asociados</label>\r\n            <table>\r\n              <thead>\r\n                <tr>\r\n                  <th>Material</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {materiales.map((material, index) => (\r\n                  <tr key={index}>\r\n                    <td>{material}</td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n          <div className=\"\">\r\n            <label>Cantidades</label>\r\n            <table>\r\n              <thead>\r\n                <tr>\r\n                  <th>Cantidad</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {/* Utilizar la longitud de materiales para generar la misma cantidad de filas */}\r\n                {Array.from({ length: materiales.length }).map((_, index) => (\r\n                  <tr key={index}>\r\n                    <td>\r\n                      <input\r\n                        type=\"number\"\r\n                        value={cantidades[index]}\r\n                        onChange={(e) => handleCantidadChange(index, e)}\r\n                        placeholder=\"Ingrese un número\"\r\n                      />\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n\r\n\r\n\r\n        <div className=\"form-group\">\r\n          <label>Fecha</label>\r\n          <input\r\n            type=\"date\"\r\n            name=\"fecha\"\r\n            value={formData.fecha}\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label>Archivo de Imagen</label>\r\n          <input\r\n            type=\"file\"\r\n            name=\"archivoImagen\"\r\n            accept=\"image/*\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label>Entidad Externa</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"entidad_externa\"\r\n            value={formData.entidad_externa}\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label>Descripción</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"descripcion\"\r\n            value={formData.descripcion}\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n\r\n\r\n        <div className=\"form-group\">\r\n          <label>Ubicación</label>\r\n          <select\r\n            name=\"ubicacion\"\r\n            value={formData.ubicacion}\r\n            onChange={handleChange}\r\n          >\r\n            <option value=\"\">Selecciona un punto de recolección</option>\r\n            {puntosRecoleccion.map((punto, index) => (\r\n              <option key={index} value={punto}>\r\n                {punto}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n\r\n\r\n         {/*message && <p style={{ color: message.startsWith('Error') ? 'red' : 'green' }}>{message}</p>*/}\r\n        <div className=\"form-group\">\r\n\r\n          {editandoId ? (\r\n            <button type=\"button\" className=\"submit-button\" onClick={guardarEdicion}>\r\n              Guardar Edición\r\n            </button>\r\n          ) : (\r\n            <button type=\"submit\" className=\"submit-button\">\r\n              Registrar\r\n            </button>\r\n          )}\r\n          <button type=\"button\" className=\"register-button\" onClick={handleCancelar}>\r\n            Salir\r\n          </button>\r\n        </div>\r\n      </form>\r\n      <h2>Registros</h2>\r\n      <ul>\r\n        {registros.slice(-5).map((registro) => (\r\n          <li key={registro.id}>\r\n            <span>{registro.material}, {registro.entidad_externa}</span>\r\n            <button onClick={() => editarRegistro(registro.id)} className=\"edit-button\">\r\n              Editar\r\n            </button>\r\n            <button onClick={() => eliminarRegistro(registro.id)} className=\"delete-button\">\r\n              Eliminar\r\n            </button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RegistrarGestorEntidadExterna;","C:\\Users\\JULIAN C\\Desktop\\PI2.6\\PI2\\src\\pages\\TransGestorGestor\\RegistrarGestorGestor.jsx",["206","207","208","209","210"],[],"//imagen not null\r\n\r\n/*const handleSubmit = async (e) => {\r\n  e.preventDefault();\r\n\r\n  const userConfirmed = window.confirm(\"¿Estás seguro de que deseas enviar el formulario?\");\r\n\r\n  if (userConfirmed) {\r\n    const form = new FormData();\r\n    for (const key in formData) {\r\n     if (key === 'imagen') {\r\n        form.append(key, formData[key], formData[key].name);\r\n      } else {\r\n        form.append(key, formData[key]);\r\n      }\r\n    }\r\n\r\n    const requestOptions = {\r\n      method: 'POST',\r\n      body: form,\r\n    };\r\n\r\n    try {\r\n      const response = await fetch('http://localhost:3000/transacciongg', requestOptions);\r\n\r\n      if (response.ok) {\r\n        console.log('Registro exitoso');\r\n        fetchData();\r\n      } else {\r\n        console.error('Error al registrar');\r\n        setErrores([...errores, 'Error al registrar: Hubo un problema al registrar el formulario.']);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error al realizar la solicitud:', error);\r\n      setErrores([...errores, 'Error al realizar la solicitud: ' + error.message]);\r\n    }\r\n  } else {\r\n    console.log('Envío del formulario cancelado');\r\n  }\r\n};*/\r\n\r\nimport React, { useState, useEffect, useCallback } from 'react';\r\nimport '../../styles/registrarTransacciones.css';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst RegistrarGestorGestor = () => {\r\n  const [formData, setFormData] = useState({\r\n    gestor_realiza: '',\r\n    gestor_recibe: '',\r\n    material: '',\r\n    cantidad: '',\r\n    fecha: '',\r\n    archivoImagen: null,\r\n    descripcion: '',\r\n    ubicacion: '',\r\n  });\r\n\r\n  const [registros, setRegistros] = useState([]);\r\n  const [editandoId, setEditandoId] = useState(null);\r\n  const [message, setMessage] = useState(null);\r\n  const [gestorNombres, setGestorNombres] = useState([]);\r\n  const [materiales, setMateriales] = useState([]);\r\n  const [gestores, setGestores] = useState([]);\r\n  const navigate = useNavigate();\r\n  const [puntosRecoleccion, setPuntosRecoleccion] = useState([]);\r\n  const [cantidades, setCantidades] = useState(Array.from({ length: materiales.length }, () => ''));\r\n\r\n  const fetchData = useCallback(async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:3000/transacciongg');\r\n      if (response.ok) {\r\n        const result = await response.json();\r\n        setRegistros(result);\r\n      } else {\r\n        console.error('Error al cargar datos de la API');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error al realizar la solicitud:', error);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n    fetch('http://localhost:3000/gestor')\r\n      .then((response) => response.json())\r\n      .then((data) => setGestores(data))\r\n      .catch((error) => console.error('Error al obtener la lista de gestores:', error));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (formData.gestor_realiza && formData.gestor_recibe) {\r\n      const commonMaterials = gestores\r\n        .find((gestor) => gestor.id === formData.gestor_realiza)?.materiales_recolectados\r\n        .split(',')\r\n        .map((material) => material.trim())\r\n        .filter((material) =>\r\n          gestores.find((gestor) => gestor.id === formData.gestor_recibe)?.materiales_recolectados\r\n            .split(',')\r\n            .map((m) => m.trim())\r\n            .includes(material)\r\n        );\r\n\r\n      setMateriales(commonMaterials);\r\n      setCantidades(Array.from({ length: commonMaterials.length }, () => ''));\r\n    }\r\n  }, [formData.gestor_realiza, formData.gestor_recibe, gestores]);\r\n\r\n  const handleMaterialChange = (e) => {\r\n    const selectedMaterial = e.target.value;\r\n    setFormData((prevFormData) => ({\r\n      ...prevFormData,\r\n      material: selectedMaterial,\r\n    }));\r\n  \r\n    setMateriales((prevMateriales) => [...prevMateriales, selectedMaterial]);\r\n  };\r\n\r\n\r\n  const fetchMaterials = (gestorId) => {\r\n    const parsedId = parseInt(gestorId);\r\n    if (!isNaN(parsedId)) {\r\n      fetch(`http://localhost:3000/gestor/${parsedId}`)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        if (data && data.materiales_recolectados) {\r\n          const materialList = data.materiales_recolectados.split(',').map(materialId => materialId.trim());\r\n          setMateriales(materialList);\r\n        }\r\n      })\r\n      .catch((error) => console.error('Error al obtener la lista de materiales:', error));\r\n    } else {\r\n      console.error('El ID seleccionado no es válido:', gestorId);\r\n    }\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n  \r\n    setFormData((prevFormData) => ({\r\n      ...prevFormData,\r\n      [name]: value,\r\n    }));\r\n  };\r\n\r\n  const handleCantidadChange = (index, event) => {\r\n    const newValue = event.target.value;\r\n\r\n    setCantidades((prevCantidades) => {\r\n      const updatedCantidades = [...prevCantidades];\r\n      updatedCantidades[index] = newValue;\r\n\r\n      const cantidadesString = updatedCantidades.join(', ');\r\n      setFormData((prevFormData) => ({\r\n        ...prevFormData,\r\n        cantidad: cantidadesString,\r\n      }));\r\n\r\n      return updatedCantidades;\r\n    });\r\n  };\r\n\r\n  const handleGestorRealizaIdChange = async (e) => {\r\n    const selectedId = e.target.value;\r\n    if (selectedId !== \"0\") {\r\n      const parsedId = parseInt(selectedId);\r\n      if (!isNaN(parsedId)) {\r\n        try {\r\n          const response = await fetch(`http://localhost:3000/gestor/${parsedId}`);\r\n          if (response.ok) {\r\n            const data = await response.json();\r\n            setFormData({\r\n              ...formData,\r\n              gestor_realiza: data.id,\r\n            });\r\n            fetchMaterials(parsedId);\r\n          } else {\r\n            console.error('Error al obtener los detalles del gestor realiza:', response.status);\r\n          }\r\n        } catch (error) {\r\n          console.error('Error al obtener los detalles del gestor realiza:', error);\r\n        }\r\n      } else {\r\n        console.error('El ID seleccionado no es válido:', selectedId);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleGestorRecibeIdChange = async (e) => {\r\n    const selectedId = e.target.value;\r\n    if (selectedId !== \"0\") {\r\n      const parsedId = parseInt(selectedId);\r\n      if (!isNaN(parsedId)) {\r\n        try {\r\n          const response = await fetch(`http://localhost:3000/gestor/${parsedId}`);\r\n          if (response.ok) {\r\n            const data = await response.json();\r\n            setFormData({\r\n              ...formData,\r\n              gestor_recibe: data.id,\r\n            });\r\n            fetchPuntosRecoleccion(parsedId);\r\n          } else {\r\n            console.error('Error al obtener los detalles del gestor recibe:', response.status);\r\n          }\r\n        } catch (error) {\r\n          console.error('Error al obtener los detalles del gestor recibe:', error);\r\n        }\r\n      } else {\r\n        console.error('El ID seleccionado no es válido:', selectedId);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    console.log(formData);\r\n  \r\n    if (window.confirm(\"¿Estás seguro de que deseas enviar el formulario?\")) {\r\n      try {\r\n        const requestBody = {\r\n          ...formData,\r\n          cantidad: cantidades.join(', '),\r\n          material: materiales.join(', '),\r\n        };\r\n  \r\n        const requestOptions = {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify(requestBody),\r\n        };\r\n  \r\n        const response = await fetch('http://localhost:3000/transacciones', requestOptions);\r\n  \r\n        if (response.ok) {\r\n          console.log('Registro exitoso');\r\n          fetchData();\r\n  \r\n          setFormData({\r\n            gestor_realiza: '',\r\n            gestor_recibe: '',\r\n            cantidad: '',\r\n            fecha: '',\r\n            archivoImagen: null,\r\n            descripcion: '',\r\n            ubicacion: '',\r\n          });\r\n        } else {\r\n          if (response.status === 400) {\r\n            const errorData = await response.json();\r\n            setMessage(`Error al registrar: ${errorData.message}`);\r\n          } else {\r\n            setMessage('Error al registrar. Por favor, intenta de nuevo.');\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Error al realizar la solicitud:', error);\r\n        setMessage('Error de red. Por favor, verifica tu conexión.');\r\n      }\r\n    } else {\r\n      console.log('Envío del formulario cancelado');\r\n    }\r\n  };\r\n  \r\n  \r\n  \r\n  const editarRegistro = (id) => {\r\n    \r\n    setEditandoId(id);\r\n  };\r\n\r\n  const guardarEdicion = async () => {\r\n    navigate('/gestorGestor');\r\n    const requestOptions = {\r\n      method: 'PUT',\r\n      body: JSON.stringify(formData),\r\n      headers: { 'Content-Type': 'application/json' },\r\n    };\r\n\r\n    try {\r\n      const response = await fetch(`http://localhost:3000/transacciongg/${editandoId}`, requestOptions);\r\n\r\n      if (response.ok) {\r\n        console.log('Edición exitosa');\r\n        fetchData();\r\n        setEditandoId(null);\r\n      } else {\r\n        console.error('Error al editar el registro');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error al realizar la solicitud:', error);\r\n    }\r\n  };\r\n\r\n  const eliminarRegistro = async (id) => {\r\n    try {\r\n      const response = await fetch(`http://localhost:3000/transacciongg/${id}`, {\r\n        method: 'DELETE',\r\n      });\r\n\r\n      if (response.ok) {\r\n        console.log('Eliminación exitosa');\r\n        fetchData();\r\n      } else {\r\n        console.error('Error al eliminar el registro');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error al realizar la solicitud:', error);\r\n    }\r\n  };\r\n\r\n  const handleCancelar = () => {\r\n    navigate('/gestorGestor');\r\n  };\r\n\r\n  const fetchPuntosRecoleccion = (gestorId) => {\r\n    fetch(`http://localhost:3000/gestor/${gestorId}`)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        if (data && data.puntos_recoleccion) {\r\n          const puntosRecoleccionList = data.puntos_recoleccion.split(',').map(punto => punto.trim());\r\n          setPuntosRecoleccion(puntosRecoleccionList);\r\n        } else {\r\n          console.log('No se encontraron datos de puntos de recolección en la respuesta:', data);\r\n        }\r\n      })\r\n      .catch((error) => console.error('Error al obtener la lista de puntos de recolección:', error));\r\n  };\r\n\r\n  return (\r\n    <div className=\"registrar-miembros-page\">\r\n      <h2>Formulario de Registro de Transacción - Gestor Gestor</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        <div className=\"form-group\">\r\n          <label>Gestor Realiza</label>\r\n          <select\r\n            name=\"gestor_realiza\"\r\n            value={formData.gestor_realiza}\r\n            onChange={handleGestorRealizaIdChange}\r\n          >\r\n            <option value=\"\">Selecciona un gestor realiza</option>\r\n            {gestores.map((gestor) => (\r\n              <option key={gestor.id} value={gestor.id}>\r\n                {`${gestor.id} - ${gestor.nombre}`}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n          <label>Gestor Recibe</label>\r\n          <select\r\n            name=\"gestor_recibe\"\r\n            value={formData.gestor_recibe}\r\n            onChange={handleGestorRecibeIdChange}\r\n          >\r\n            <option value=\"\">Selecciona un gestor recibe</option>\r\n            {gestores.map((gestor) => (\r\n              <option key={gestor.id} value={gestor.id}>\r\n                {`${gestor.id} - ${gestor.nombre}`}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n\r\n        <div className=\"\">\r\n          <div className=\"\">\r\n            <label>Materiales Asociados</label>\r\n            <table>\r\n              <thead>\r\n                <tr>\r\n                  <th>Material</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {materiales.map((materialId, index) => (\r\n                  <tr key={index}>\r\n                    <td>{materialId}</td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n          <div className=\"\">\r\n            <label>Cantidades</label>\r\n            <table>\r\n              <thead>\r\n                <tr>\r\n                  <th>Cantidad</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {Array.from({ length: materiales.length }).map((_, index) => (\r\n                  <tr key={index}>\r\n                    <td>\r\n                      <input\r\n                        type=\"number\"\r\n                        value={cantidades[index]}\r\n                        onChange={(e) => handleCantidadChange(index, e)}\r\n                        placeholder=\"Ingrese un número\"\r\n                      />\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n          <label>Fecha</label>\r\n          <input\r\n            type=\"date\"\r\n            name=\"fecha\"\r\n            value={formData.fecha}\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label>Archivo de Imagen</label>\r\n          <input\r\n            type=\"file\"\r\n            name=\"archivoImagen\"\r\n            accept=\"image/*\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label>Descripción</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"descripcion\"\r\n            value={formData.descripcion}\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n          <label>Ubicación</label>\r\n          <select\r\n            name=\"ubicacion\"\r\n            value={formData.ubicacion}\r\n            onChange={handleChange}\r\n          >\r\n            <option value=\"\">Selecciona un punto de recolección</option>\r\n            {puntosRecoleccion.map((punto, index) => (\r\n              <option key={index} value={punto}>\r\n                {punto}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n\r\n        {/*message && <p style={{ color: message.startsWith('Error') ? 'red' : 'green' }}>{message}</p>*/}\r\n\r\n        <div className=\"form-group\">\r\n          <button type=\"submit\" className=\"submit-button\">\r\n            Registrar\r\n          </button>\r\n          {editandoId ? (\r\n            <button onClick={guardarEdicion} className=\"edit-button\">\r\n              Guardar Edición\r\n            </button>\r\n          ) : null}\r\n          <button type=\"button\" className=\"register-button\" onClick={handleCancelar}>\r\n            Salir\r\n          </button>\r\n        </div>\r\n      </form>\r\n\r\n      <h2>Registros</h2>\r\n      <ul>\r\n        {registros.slice(-5).map((registro) => (\r\n          <li key={registro.id}>\r\n            <span>{registro.materialId}</span>\r\n            <button onClick={() => editarRegistro(registro.id)} className=\"edit-button\">\r\n              Editar\r\n            </button>\r\n            <button onClick={() => eliminarRegistro(registro.id)} className=\"delete-button\">\r\n              Eliminar\r\n            </button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RegistrarGestorGestor;\r\n\r\n","C:\\Users\\JULIAN C\\Desktop\\PI2.6\\PI2\\src\\pages\\TransGestorExterno\\GestorEntidadExterna.jsx",["211"],[],"import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst GestorEntidadExterna = () => {\r\n  const [data, setData] = useState([]);\r\n  const [gestoresData, setGestoresData] = useState([]); // Estado para almacenar los datos de los gestores\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [searchId, setSearchId] = useState('');\r\n  const itemsPerPage = 10;\r\n  const totalPages = Math.ceil(data.length / itemsPerPage);\r\n  const [filteredData, setFilteredData] = useState([]);\r\n  const [error, setError] = useState(null);\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      const transacciongeResponse = await fetch('http://localhost:3000/transaccionge');\r\n      const gestoresResponse = await fetch('http://localhost:3000/gestor'); \r\n  \r\n      if (transacciongeResponse.ok && gestoresResponse.ok) {\r\n        const transacciongeResult = await transacciongeResponse.json();\r\n        const gestoresResult = await gestoresResponse.json();\r\n  \r\n        setData(transacciongeResult);\r\n        setGestoresData(gestoresResult);\r\n  \r\n        \r\n  \r\n        setError(null);\r\n      } else {\r\n        console.error('Error al cargar datos de la API');\r\n        setError('Error al cargar datos de la API');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error al realizar la solicitud:', error);\r\n      setError('Error al realizar la solicitud');\r\n    }\r\n  };\r\n  \r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  const handlePageChange = (newPage) => {\r\n    setCurrentPage(newPage);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const filtered = data.filter((item) =>\r\n      item.id.toString().includes(searchId)\r\n    );\r\n\r\n    setFilteredData(filtered);\r\n  }, [searchId, data]);\r\n\r\n  const paginatedData = filteredData.slice(\r\n    (currentPage - 1) * itemsPerPage,\r\n    currentPage * itemsPerPage\r\n  );\r\n\r\n  const getGestorNameById = (gestor_recibe) => {\r\n    const gestor = gestoresData.find((gestor) => gestor.id === Number(gestor_recibe));\r\n    return gestor ? gestor.nombre : 'Nombre no encontrado';\r\n  };\r\n\r\n  return (\r\n    <div className=\"about-page\">\r\n      <h1 className=\"page-title\">Gestor Entidad Externa</h1>\r\n\r\n      {error && (\r\n        <div className=\"error-message\">\r\n          Error: {error}\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"search-bar\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Buscar por ID\"\r\n          value={searchId}\r\n          onChange={(e) => setSearchId(e.target.value)}\r\n          className=\"search-input\"\r\n        />\r\n      </div>\r\n      <table className=\"custom-table\">\r\n        <thead>\r\n          <tr>\r\n            <th>Gestor</th>\r\n            <th>Material</th>\r\n            <th>Cantidad</th>\r\n            <th>Fecha</th>\r\n            <th>Archivo de Imagen</th>\r\n            <th>Nombre de Entidad</th>\r\n            <th>Descripción</th>\r\n            <th>Ubicación</th>\r\n            <th>Acciones</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {paginatedData.map((item) => (\r\n            <tr key={item.id}>\r\n              <td>{item.gestor ? item.gestor.nombre : 'Nombre no encontrado'}</td>\r\n              <td>{item.material}</td>\r\n              <td>{item.cantidad}</td>\r\n              <td>{item.fecha}</td>\r\n              <td>{item.archivoImagen ? item.archivoImagen : 'NULL'}</td>\r\n              <td>{item.entidad_externa}</td>\r\n              <td>{item.descripcion}</td>\r\n              <td>{item.ubicacion}</td>\r\n              <td>\r\n                <Link to={`/editarGestorEntidadExterna/${item.id}`}>\r\n                  <button>Editar</button>\r\n                </Link>\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n\r\n      <div className=\"pagination\">\r\n        <button\r\n          onClick={() => handlePageChange(currentPage - 1)}\r\n          disabled={currentPage === 1}\r\n        >\r\n          Anterior\r\n        </button>\r\n        <span>Página {currentPage} de {totalPages}</span>\r\n        <button\r\n          onClick={() => handlePageChange(currentPage + 1)}\r\n          disabled={currentPage === totalPages}\r\n        >\r\n          Siguiente\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"action-buttons\">\r\n        <Link to=\"/registrarGestorEntidadExterna\" className=\"register-button\">\r\n          Registrar Transacción Gestor Entidad Externa\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GestorEntidadExterna;\r\n\r\n\r\n","C:\\Users\\JULIAN C\\Desktop\\PI2.6\\PI2\\src\\pages\\Graficas\\BarChart.jsx",[],[],"C:\\Users\\JULIAN C\\Desktop\\PI2.6\\PI2\\src\\pages\\Graficas\\LineChartT.jsx",[],[],"C:\\Users\\JULIAN C\\Desktop\\PI2.6\\PI2\\src\\pages\\Graficas\\DoughnutChart.jsx",[],[],"C:\\Users\\JULIAN C\\Desktop\\PI2.6\\PI2\\src\\pages\\Graficas\\LineChartG.jsx",[],[],"C:\\Users\\JULIAN C\\Desktop\\PI2.6\\PI2\\src\\pages\\Estadisticas.jsx",[],[],"C:\\Users\\JULIAN C\\Desktop\\PI2.6\\PI2\\src\\components\\StatsLayout.jsx",[],[],{"ruleId":"212","replacedBy":"213"},{"ruleId":"214","replacedBy":"215"},{"ruleId":"216","severity":1,"message":"217","line":18,"column":10,"nodeType":"218","messageId":"219","endLine":18,"endColumn":19},{"ruleId":"216","severity":1,"message":"220","line":21,"column":10,"nodeType":"218","messageId":"219","endLine":21,"endColumn":17},{"ruleId":"216","severity":1,"message":"221","line":22,"column":10,"nodeType":"218","messageId":"219","endLine":22,"endColumn":26},{"ruleId":"216","severity":1,"message":"222","line":22,"column":28,"nodeType":"218","messageId":"219","endLine":22,"endColumn":47},{"ruleId":"216","severity":1,"message":"223","line":25,"column":10,"nodeType":"218","messageId":"219","endLine":25,"endColumn":27},{"ruleId":"216","severity":1,"message":"224","line":25,"column":29,"nodeType":"218","messageId":"219","endLine":25,"endColumn":49},{"ruleId":"225","severity":1,"message":"226","line":48,"column":6,"nodeType":"227","endLine":48,"endColumn":8,"suggestions":"228"},{"ruleId":"225","severity":1,"message":"226","line":56,"column":6,"nodeType":"227","endLine":56,"endColumn":8,"suggestions":"229"},{"ruleId":"216","severity":1,"message":"230","line":76,"column":9,"nodeType":"218","messageId":"219","endLine":76,"endColumn":29},{"ruleId":"216","severity":1,"message":"231","line":188,"column":11,"nodeType":"218","messageId":"219","endLine":188,"endColumn":30},{"ruleId":"216","severity":1,"message":"232","line":13,"column":10,"nodeType":"218","messageId":"219","endLine":13,"endColumn":22},{"ruleId":"216","severity":1,"message":"233","line":50,"column":9,"nodeType":"218","messageId":"219","endLine":50,"endColumn":38},{"ruleId":"216","severity":1,"message":"234","line":59,"column":9,"nodeType":"218","messageId":"219","endLine":59,"endColumn":43},{"ruleId":"216","severity":1,"message":"232","line":12,"column":10,"nodeType":"218","messageId":"219","endLine":12,"endColumn":22},{"ruleId":"216","severity":1,"message":"235","line":14,"column":9,"nodeType":"218","messageId":"219","endLine":14,"endColumn":26},{"ruleId":"216","severity":1,"message":"236","line":29,"column":9,"nodeType":"218","messageId":"219","endLine":29,"endColumn":18},{"ruleId":"216","severity":1,"message":"237","line":17,"column":21,"nodeType":"218","messageId":"219","endLine":17,"endColumn":33},{"ruleId":"216","severity":1,"message":"220","line":21,"column":10,"nodeType":"218","messageId":"219","endLine":21,"endColumn":17},{"ruleId":"216","severity":1,"message":"238","line":22,"column":10,"nodeType":"218","messageId":"219","endLine":22,"endColumn":23},{"ruleId":"216","severity":1,"message":"239","line":22,"column":25,"nodeType":"218","messageId":"219","endLine":22,"endColumn":41},{"ruleId":"225","severity":1,"message":"226","line":49,"column":6,"nodeType":"227","endLine":49,"endColumn":8,"suggestions":"240"},{"ruleId":"225","severity":1,"message":"241","line":56,"column":6,"nodeType":"227","endLine":56,"endColumn":25,"suggestions":"242"},{"ruleId":"216","severity":1,"message":"243","line":111,"column":9,"nodeType":"218","messageId":"219","endLine":111,"endColumn":29},{"ruleId":"216","severity":1,"message":"220","line":60,"column":10,"nodeType":"218","messageId":"219","endLine":60,"endColumn":17},{"ruleId":"216","severity":1,"message":"238","line":61,"column":10,"nodeType":"218","messageId":"219","endLine":61,"endColumn":23},{"ruleId":"216","severity":1,"message":"239","line":61,"column":25,"nodeType":"218","messageId":"219","endLine":61,"endColumn":41},{"ruleId":"225","severity":1,"message":"226","line":88,"column":6,"nodeType":"227","endLine":88,"endColumn":8,"suggestions":"244"},{"ruleId":"216","severity":1,"message":"230","line":108,"column":9,"nodeType":"218","messageId":"219","endLine":108,"endColumn":29},{"ruleId":"216","severity":1,"message":"245","line":61,"column":9,"nodeType":"218","messageId":"219","endLine":61,"endColumn":26},"no-native-reassign",["246"],"no-negated-in-lhs",["247"],"no-unused-vars","'registros' is assigned a value but never used.","Identifier","unusedVar","'message' is assigned a value but never used.","'materialesString' is assigned a value but never used.","'setMaterialesString' is assigned a value but never used.","'puntosRecoleccion' is assigned a value but never used.","'setPuntosRecoleccion' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.","ArrayExpression",["248"],["249"],"'handleMaterialChange' is assigned a value but never used.","'numericGestorRecibe' is assigned a value but never used.","'gestoresData' is assigned a value but never used.","'handlePuntosRecoleccionChange' is assigned a value but never used.","'handleMaterialesRecolectadosChange' is assigned a value but never used.","'fetchGestoresData' is assigned a value but never used.","'fetchData' is assigned a value but never used.","'setGestorIds' is assigned a value but never used.","'gestorNombres' is assigned a value but never used.","'setGestorNombres' is assigned a value but never used.",["250"],"React Hook useEffect has a missing dependency: 'fetchMaterials'. Either include it or remove the dependency array.",["251"],"'handleGestorIdChange' is assigned a value but never used.",["252"],"'getGestorNameById' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"253","fix":"254"},{"desc":"253","fix":"255"},{"desc":"253","fix":"256"},{"desc":"257","fix":"258"},{"desc":"253","fix":"259"},"Update the dependencies array to be: [fetchData]",{"range":"260","text":"261"},{"range":"262","text":"261"},{"range":"263","text":"261"},"Update the dependencies array to be: [fetchMaterials, formData.gestorId]",{"range":"264","text":"265"},{"range":"266","text":"261"},[1613,1615],"[fetchData]",[1951,1953],[1708,1710],[1871,1890],"[fetchMaterials, formData.gestorId]",[2796,2798]]